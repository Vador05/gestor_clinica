{"version":3,"sources":["ri-backoffice.js"],"names":["angular","makeArray","arr","isArray","provideRootElement","modules","element","unshift","$provide","value","createInjector","injectorModules","concat","injector","bootstrapApplication","angularApp","document","ready","bootstrap","lazy","app","$q","get","promises","errorCallback","noop","loadingCallback","doneCallback","resolve","promise","when","instantiate","push","this","all","then","finally","loading","callback","done","error","module","$rootScopeProvider","digestTtl","run","$rootScope","configs","$http","resp","constant","data","deferred","defer","extensions","assets","$","scripts","i","length","cache","asset","src","attributes","nodeValue","type","files","j","pages","p","backoffice","appendChild","createCSSNodes","getScripts","obj","div","createElement","link","href","rel","progress","internalCallback","ajaxSetup","async","forEach","script","getScript","getMultiScripts","path","_arr","map","scr","Deferred","apply","config","$routeProvider","customMenuProvider","authCheck","$location","loginProvider","auth","getUser","user","defaults","headers","common","Authorization","token","login","undefined","allowedUser","$inject","homePage","home","templateUrl","controller","reloadOnSearch","logout","images","gallery","menu","page","url","template","modelName","setCustomMenu","otherwise","redirectTo","$translateProvider","$translatePartialLoaderProvider","i18n","addPart","useLoader","urlTemplate","registerAvailableLanguageKeys","def","fallbackLanguage","useLocalStorage","uniqueLanguage","use","preferredLanguage","provider","menuElements","$get","cookieStore","factory","profile","userModel","cb","post","success","res","role","cookieOptions","end","Infinity","put","JSON","stringify","$broadcast","err","remove","parse","password","logged","extend","overrides","service","override","_method","_function","getService","Upload","modelsConfig","singlesCache","shards","prefix","$on","invalidate","console","log","getHttp","getUpload","setShard","key","model","shard","getShard","removeShard","getModels","schemas","models","getModel","schema","ajax","responseText","getModelElements","skip","limit","plural","body","elements","result","status","count","getModelSchema","getModelConfig","postDocument","response","getUrl","Error","getDocument","id","qParams","params","cfg","shardKey","putDocument","removeDocument","opts","delete","removeDocumentByMongoId","uploadToGallery","file","getGalleryPath","upload","fileFormDataName","evt","parseInt","loaded","total","uploadImage","fieldName","index","image","uploadFile","deleteImage","deleteFile","getImageUrl","imageName","getRandomQuery","getFileUrl","fileName","getSingleModel","search","query","documents","search_count","export","format","searchQuery","by","postAsForm","import","method","form","setAttribute","replace","hasOwnProperty","hiddenField","submit","removeChild","getGraph","graphID","encodeURI","galleryGetByPath","isGalleryEnabled","galleryDelete","galleryDeleteByPath","galleryPostByPath","endpoint","fieldIsDenormalized","retElem","ret","denormalize","indexOf","target","getFieldFromSchema","field","split","denormalizedFieldPosition","properties","ref","source","denormalizedField","refSchema","copy","title","lastIndexOf","prettifyTitle","substring","Object","keys","TIMEOUT_MS","timers","selectCacheService","event","next","current","m","clearTimeout","b","posts","cached","cbks","cbk","gets","setTimeout","httpCall","q","$or","singleQ","doc","idKey","getObj","$routeParams","flash","$injector","version","ngDialog","getOpenDialogs","open","className","responseError","rejection","modelId","errorInReferencedProperty","handleError","ignoreError","redirectError","warning","errors","e","message","splice","Math","floor","reject","$httpProvider","interceptors","find","depArr","innerDependsOn","each","k","v","func","indexArray","pop","join","scope","updateFunc","modelConfig","dependsValue","arrayIndex","newVal","oldVal","param","safeAccess","replaced","setField","test","root","targetField","$watchCollection","nV","oV","Array","normPath","$watch","hasAngularVariable","deAngularizeUrl","ng","matched","f","getField","getAngularVariables","exec","separator","str","toUpperCase","splitted","returnArray","parentArr","rootElem","match","tmp","elem","newPath","arrInd","getAllSchemaFields","fields","searchFields","parent","processForm","submitButtons","showSubmitButtons","innerForm","tabs","items","randomNumber","Date","getTime","setQuery","clearQuery","getQuery","setSortBy","sort","sortBy","addSortBy","asc","getSort","setSkip","setLimit","searchAndGroup","directive","restrict","$scope","customMenu","$window","actualSchema","isDisabled","isOpen","render","sections","Sections","add","section","clickTo","hideMenu","isSingle","menuTitle","openSection","actualSection","click","name","conf","parentSchema","location","isMenuCollapsed","isInstanceOf","Section","debug","a","orderKeys","levels","curLevel","keyOrder","k1","k2","after","scrollTo","$elm","attr","on","animate","scrollTop","offset","top","$compile","attrs","$eval","compile","html","contents","ngModel","graph","selected","punchCardData","graphs","g","groupMode","selectEnabled","barsData","values","$route","performAction","action","req","Content-Type","exportElements","checked","filter","x","_id","exportModels","importModels","enableDelete","checkedValues","val","removeSelected","promptAlert","del","deletions","reload","searches","buildPath","sc","updateSearch","elemSearch","noSearch","availableFields","fieldFromSchema","placeholder","addSearch","s","clear","isHidden","class","hasToGenerateSearchField","allFields","displayField","searchableFields","parseMongoDate","txt","dt","parseDateTimeRange","updateYear","start","d","day","month","year","hour","sec","isNaN","second","minute","d1","d2","sec1","sec2","debugParse","Number","String","pieces","parseDateTime","trim","parseDateOrTime","dt1","dt2","parseTime","parseDate","Num","t","regex","o","toLocaleString","singleQuery","sfield","$regex","$options","alert","$parent","elemsearch","select","idSelect","getDocumentById","forDisplay","forID","searchRes","present","some","disabled","searchEnabled","printSelectedElement","selectDisplayField","selectIdField","bind","raw","arguments","offsetHeight","scrollHeight","$select","children","width","css","$animate","leave","eq","cleanupAfterAnimation","$controller","m_copy","$sce","getTag","tag","prune","$anchorScroll","$timeout","$modal","dependsOn","$translate","modified","buttonsPosition","walkThroughSchema","editOnCreate","toLowerCase","readonly","i18nTitle","instant","equals","schemaHREF","hash","submitForm","isApply","$valid","validation","validationErrors","$error","yOffset","cancel","history","back","ngForm","preventDefault","modalInstance","size","basePathLength","absUrl","http","window","$modalInstance","ok","close","dismiss","$document","update","loginError","encodeURIComponent","postLoginFuncs","pretty","args","defaultItemsPerPage","removeDisabled","maxSize","create","checkedGroupIds","schemaForm","allDisplayFields","extraDisplayFields","totalElements","itemsPerPage","userItemsPerPage","defaultSearch","pageChanged","currentPage","hasShard","__t","displayCustomField","sch","toJSON","property","text","trustAsHtml","toString","navbar","toggleMenu","$$route","shardKeyText","shardValues","filtered","locked","languages","showLanguages","lang"],"mappings":"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","file":"ri-backoffice.min.js","sourcesContent":["(function (angular) {\n\n    'use strict';\n\n    //Generic   \n\n    function makeArray(arr) {\n        if(!arr){\n            return [];\n        }\n        return angular.isArray(arr) ? arr : [arr];\n    }\n\n    //Angular\n\n    function provideRootElement(modules, element) {\n        element = angular.element(element);\n        modules.unshift(['$provide',\n            function ($provide) {\n                $provide.value('$rootElement', element);\n            }]);\n    }\n\n    function createInjector(injectorModules, element) {\n        var modules = ['ng'].concat(makeArray(injectorModules));\n        if (element) {\n            provideRootElement(modules, element);\n        }\n        return angular.injector(modules);\n    }\n\n    function bootstrapApplication(angularApp) {\n        angular.element(document).ready(function () {\n            angular.bootstrap(document, [angularApp]);\n        });\n    }\n\n    angular.lazy = function (app, modules) {\n\n        var injector = createInjector(modules),\n            $q = injector.get('$q'),\n            promises = [],\n            errorCallback = angular.noop,\n            loadingCallback = angular.noop,\n            doneCallback = angular.noop;\n\n        return {\n\n            resolve: function (promise) {\n                promise = $q.when(injector.instantiate(promise));\n                promises.push(promise);\n                return this;\n            },\n\n            bootstrap: function () {\n\n                loadingCallback();\n\n                return $q.all(promises)\n                    .then(function () {\n                        bootstrapApplication(app);\n                    }, errorCallback)\n                    .finally(doneCallback);\n            },\n\n            loading: function(callback){\n                loadingCallback = callback;\n                return this;\n            },\n\n            done: function(callback){\n                doneCallback = callback;\n                return this;\n            },\n\n            error: function(callback){\n                errorCallback = callback;\n                return this;\n            }\n        };\n\n    };\n\n})(angular);\n(function () {\r\n    'use strict';\r\n    var app = angular.module('injectorApp', ['ngRoute', 'ngBiscuit', 'schemaForm', 'datePicker', 'ui.select',\r\n            'ui.ace', 'ui.codemirror', 'ui.bootstrap', 'ngFileUpload', 'ngDroplet', 'punchCard', 'nvd3ChartDirectives', 'flash', 'ngDialog', 'angular-loading-bar',\r\n            'pascalprecht.translate', 'ngCookies', 'nemLogging', 'ui-leaflet', 'angular-toArrayFilter'],\r\n        ['$rootScopeProvider', function ($rootScopeProvider) {\r\n            $rootScopeProvider.digestTtl(15);\r\n        }])\r\n        .run(['$rootScope', 'configs', function ($rootScope, configs) {\r\n            $rootScope.configs = configs;\r\n        }]);\r\n\r\n    angular.lazy(\"injectorApp\")\r\n        .resolve(['$http', function ($http) {\r\n            return $http.get('/configs')\r\n                .then(function (resp) {\r\n                    app.constant('configs', resp.data);\r\n                });\r\n        }])\r\n        .resolve(['$http', '$q', function ($http, $q) {\r\n\r\n            var deferred = $q.defer();\r\n            $http.get('/admin/extensions').then(function (resp) {\r\n                app.constant('extensions', resp.data);\r\n\r\n                var extensions = resp.data;\r\n                var assets = $('asset-loader');\r\n                var scripts = [];\r\n\r\n                for (var i = 0; i < assets.length; i++) {\r\n                    var cache = [];\r\n\r\n                    var asset = assets[i];\r\n                    var src = asset.attributes.src.nodeValue;\r\n                    var type = asset.attributes.type.nodeValue;\r\n\r\n                    if (src === 'files') {\r\n                        if (extensions.files[type] && extensions.files[type].length) {\r\n                            cache = cache.concat(extensions.files[type]);\r\n                        }\r\n                    } else if (src === 'pages') {\r\n                        for (var j in extensions.pages) {\r\n                            var p = extensions.pages[j];\r\n                            if (p.backoffice) {\r\n                                if (p[type] && p[type].length) {\r\n                                    cache = cache.concat(p[type]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (type === 'css') {\r\n                        asset.appendChild(createCSSNodes(cache));\r\n                    } else if (type === 'js') {\r\n                        if (cache && cache.length) {\r\n                            scripts = scripts.concat(cache);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //$.getMultiScripts(scripts).done(function () {\r\n                //    deferred.resolve();\r\n                //});\r\n                getScripts(scripts, function () {\r\n                    deferred.resolve();\r\n                });\r\n\r\n            });\r\n\r\n            return deferred.promise;\r\n        }])\r\n        .bootstrap();\r\n\r\n    function createCSSNodes(obj) {\r\n        var div = document.createElement('div');\r\n        for (var i in obj) {\r\n            var link = document.createElement('link');\r\n            link.href = obj[i];\r\n            link.rel = 'stylesheet';\r\n            div.appendChild(link);\r\n        }\r\n        return div;\r\n    }\r\n\r\n    function getScripts(scripts, callback) {\r\n        if (!scripts || !scripts.length) {\r\n            return callback();\r\n        }\r\n        var progress = 0;\r\n        var internalCallback = function () {\r\n            if (++progress == scripts.length) {\r\n                $.ajaxSetup({async: true});\r\n                callback();\r\n            }\r\n        };\r\n\r\n        $.ajaxSetup({async: false});\r\n        scripts.forEach(function (script) {\r\n            $.getScript(script, internalCallback);\r\n        });\r\n\r\n    }\r\n\r\n    $.getMultiScripts = function (arr, path) {\r\n        var _arr = $.map(arr, function (scr) {\r\n            return $.getScript((path || \"\") + scr);\r\n        });\r\n\r\n        _arr.push($.Deferred(function (deferred) {\r\n            $(deferred.resolve);\r\n        }));\r\n\r\n        return $.when.apply($, _arr);\r\n    };\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .config(['$routeProvider', 'configs', 'extensions', 'customMenuProvider', function ($routeProvider, configs, extensions, customMenuProvider) {\r\n\r\n            var authCheck = function ($q, $rootScope, $location, $http, loginProvider, configs) {\r\n                var defer = $q.defer();\r\n                if (configs.auth) {\r\n                    loginProvider.getUser(function (user) {\r\n                        if (!user) {\r\n                            $location.path('/login');\r\n                        } else {\r\n                            $http.defaults.headers.common.Authorization = 'BEARER ' + user.token;\r\n                            $rootScope.login = undefined;\r\n                        }\r\n                        defer.resolve();\r\n                    });\r\n\r\n                } else {\r\n                    $rootScope.allowedUser = true;\r\n                    defer.resolve();\r\n                }\r\n                return defer.promise;\r\n            };\n            authCheck.$inject = ['$q', '$rootScope', '$location', '$http', 'loginProvider', 'configs'];\r\n\r\n            var homePage = 'html/models.html';\r\n            if (configs.backoffice.home) {\r\n                homePage = configs.backoffice.home;\r\n            }\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: homePage,\r\n                    controller: 'MainController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/model/:schema', {\r\n                    templateUrl: 'html/model.html',\r\n                    controller: 'ModelController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/model/:schema/new', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'CreateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/update/:id', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'UpdateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/update/:id/:shard', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'UpdateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/graphs', {\r\n                    templateUrl: 'html/graphs.html',\r\n                    controller: 'GraphsController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/login', {\r\n                    // login / password\r\n                    templateUrl: 'html/login.html',\r\n                    controller: 'LoginController',\r\n                    resolve: {\r\n                        app: ['$q', '$rootScope', '$location', 'loginProvider', function ($q, $rootScope, $location, loginProvider) {\r\n                            var defer = $q.defer();\r\n                            loginProvider.getUser(function (user) {\r\n                                if (user) {\r\n                                    $location.path('/');\r\n                                } else {\r\n                                    $rootScope.login = true;\r\n                                }\r\n                                defer.resolve();\r\n                            });\r\n                            return defer.promise;\r\n                        }]\r\n                    }\r\n                })\r\n                .when('/logout', {\r\n                    resolve: {\r\n                        app: ['$q', '$rootScope', '$location', 'loginProvider', function ($q, $rootScope, $location, loginProvider) {\r\n                            var defer = $q.defer();\r\n                            loginProvider.logout();\r\n                            $location.path('/');\r\n                            defer.resolve();\r\n                            return defer.promise;\r\n                        }]\r\n                    }\r\n                })\r\n                .when('/settings', {\r\n                    templateUrl: 'html/settings.html',\r\n                    controller: 'SettingsController'\r\n                });\r\n\r\n            if (configs.images && configs.images.gallery) {\r\n                $routeProvider\r\n                    .when('/gallery', {\r\n                        templateUrl: 'html/gallery.html',\r\n                        resolve: {\r\n                            app: authCheck\r\n                        }\r\n                    });\r\n            }\r\n\r\n\r\n            if (extensions && extensions.pages) {\r\n                var menu = [];\r\n                for (var i in extensions.pages) {\r\n                    var page = extensions.pages[i];\r\n\r\n                    //Add the route for the custom page. modelName controls the sharding selector if given\r\n                    if (page.backoffice) {\r\n                        $routeProvider.when('/' + page.url, {\r\n                            templateUrl: page.template,\r\n                            controller: page.controller,\r\n                            resolve: {\r\n                                app: authCheck\r\n                            },\r\n                            modelName: page.modelName\r\n                        });\r\n                    }\r\n\r\n                    if (page.menu) {\r\n                        menu.push(page.menu);\r\n                    }\r\n                }\r\n                customMenuProvider.setCustomMenu(menu);\r\n            }\r\n\r\n            $routeProvider.otherwise({redirectTo: '/'});\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n\n    angular.module('injectorApp')\n        .config(['$translateProvider', '$translatePartialLoaderProvider', 'configs', function ($translateProvider, $translatePartialLoaderProvider, configs) {\n            var i18n = configs.backoffice.i18n;\n            $translatePartialLoaderProvider.addPart('login');\n            $translatePartialLoaderProvider.addPart('model');\n            $translatePartialLoaderProvider.addPart('models');\n            $translatePartialLoaderProvider.addPart('navbar');\n            $translatePartialLoaderProvider.addPart('search');\n            $translatePartialLoaderProvider.addPart('create_update');\n            //$translatePartialLoaderProvider.addPart('flash');\n            $translatePartialLoaderProvider.addPart('version_dialog');\n\n            if (i18n && i18n.length) {\n                for (var i = 0; i < i18n.length; i++) {\n                    $translatePartialLoaderProvider.addPart(i18n[i]);\n                }\n            }\n\n            $translateProvider.useLoader('$translatePartialLoader', {\n                urlTemplate: 'i18n/{part}/{lang}.json'\n            });\n            $translateProvider.registerAvailableLanguageKeys(['en', 'es']);\n            var def = \"en\";\n            $translateProvider.fallbackLanguage('en');\n            $translateProvider.useLocalStorage();\n            if (configs.backoffice.uniqueLanguage) {\n                def = configs.backoffice.uniqueLanguage;\n                $translateProvider.use(def);\n            }\n            $translateProvider.preferredLanguage(def);\n        }]);\n\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .provider('customMenu', function () {\r\n        var menuElements;\r\n\r\n        this.setCustomMenu = function(value) {\r\n            menuElements = value;\r\n        };\r\n\r\n        this.$get = function(){\r\n            return menuElements;\r\n        };\r\n    });\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .provider('loginProvider', function () {\r\n\r\n            this.$get = ['$http', '$location', 'cookieStore', '$rootScope', function ($http, $location, cookieStore, $rootScope) {\r\n                var factory = {};\r\n                $http.defaults.headers.common['Client-Type'] = 'backoffice';\r\n                $http.defaults.headers.common.profile = 'back';\r\n                factory.login = function (userModel, cb) {\r\n                    $http.post('/auth/login', userModel).success(function (res) {\r\n                        var user = {};\r\n                        //user.name = userModel.login;\r\n                        user.login = userModel.login;\r\n                        user.role = res.role;\r\n                        user.token = res.token;\r\n                        var cookieOptions = {path: '/', end: Infinity};\r\n                        cookieStore.put('user', JSON.stringify(user), cookieOptions);\r\n                        $http.defaults.headers.common.Authorization = 'BEARER ' + res.token;\r\n                        $rootScope.$broadcast('login', user);\r\n                        $rootScope.allowedUser = true;\r\n                        cb(user);\r\n                    }).error(function (err) {\r\n                        var cookieOptions = {path: '/'};\r\n                        cookieStore.remove('user', cookieOptions);\r\n                        $rootScope.$broadcast('logout', undefined);\r\n                        $rootScope.allowedUser = false;\r\n                        cb(false);\r\n                    });\r\n                };\r\n\r\n                factory.getUser = function (cb) {\r\n                    var user = JSON.parse(cookieStore.get('user'));\r\n                    if (user && !$rootScope.allowedUser && user.login && (user.password || user.token)) {\r\n                        factory.login(user, function (logged) {\r\n                            if (logged) {\r\n                                angular.extend(user, logged);\r\n                                cb(logged);\r\n                            } else {\r\n                                cb(undefined);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        if (!user) {\r\n                            $rootScope.allowedUser = false;\r\n                        } else {\r\n                            //$rootScope.$broadcast('login', user);\r\n                        }\r\n\r\n                        cb(user);\r\n                    }\r\n                };\r\n\r\n                factory.logout = function () {\r\n                    var cookieOptions = {path: '/'};\r\n                    cookieStore.remove('user', cookieOptions);\r\n                    $location.path('/login');\r\n                    $rootScope.$broadcast('logout', undefined);\r\n                };\r\n\r\n                return factory;\r\n            }];\r\n        });\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .provider('models', function () {\r\n                var overrides = {};\r\n                var service = {};\r\n\r\n                this.override = function (_method, _function) {\r\n                    overrides[_method] = _function;\r\n                };\r\n\r\n                this.getService = function () {\r\n                    return service;\r\n                };\r\n\r\n\r\n                this.$get = ['$rootScope', '$http', 'Upload', 'configs', 'common', function ($rootScope, $http, Upload, configs, common) {\r\n\r\n                    var modelsConfig = {};\r\n                    var singlesCache = {};\r\n                    var shards = {};\r\n                    var prefix = '';\r\n\r\n                    $rootScope.$on('logout', function () {\r\n                        service.invalidate();\r\n                    });\r\n\r\n                    $rootScope.$on('invalidate', function () {\r\n                        console.log(\"invalidate models provider\");\r\n                        service.invalidate();\r\n                    });\r\n\r\n                    service.invalidate = function () {\r\n                        shards = {};\r\n                        singlesCache = {};\r\n                        modelsConfig = {};\r\n                    };\r\n\r\n                    service.getHttp = function () {\r\n                        return $http;\r\n                    };\r\n\r\n                    service.getUpload = function () {\r\n                        return Upload;\r\n                    };\r\n\r\n                    service.setShard = function (key, value, model) {\r\n                        var shard = {};\r\n                        shard.key = key;\r\n                        shard.value = value;\r\n                        shard.model = model;\r\n                        shards[model] = shard;\r\n                    };\r\n\r\n                    service.getShard = function (model) {\r\n                        return shards[model];\r\n                    };\r\n\r\n                    service.removeShard = function (model) {\r\n                        delete shards[model];\r\n                    };\r\n\r\n                    service.getModels = function (cb) {\r\n                        prefix = configs.app.prefix;\r\n\r\n                        //AVOID CACHE (FOR CHANGING MODELS WHEN LOGIN LOGOUT :)\r\n                        $http.get('/schemas').then(function (schemas) {\r\n                            var models = schemas.data;\r\n                            cb(models);\r\n                        });\r\n                    };\r\n\r\n                    service.getModel = function (modelName, cb) {\r\n                        if (!modelsConfig[modelName] && cb) {\r\n                            $http.get('/schema/' + modelName).then(function (schema) {\r\n                                $http.get('/schema/' + modelName + '/formconfig').then(function (config) {\r\n                                    modelsConfig[modelName] = {};\r\n                                    modelsConfig[modelName].schema = schema.data;\r\n                                    modelsConfig[modelName].config = config.data;\r\n                                    cb(modelsConfig[modelName]);\r\n                                });\r\n                            });\r\n                        } else if (!modelsConfig[modelName] && !cb) {\r\n                            var schema = JSON.parse($.ajax({\r\n                                type: \"GET\",\r\n                                url: '/schema/' + modelName,\r\n                                async: false\r\n                            }).responseText);\r\n\r\n                            var config = JSON.parse($.ajax({\r\n                                type: \"GET\",\r\n                                url: '/schema/' + modelName + '/formconfig',\r\n                                async: false\r\n                            }).responseText);\r\n\r\n                            modelsConfig[modelName] = {};\r\n                            modelsConfig[modelName].schema = schema;\r\n                            modelsConfig[modelName].config = config;\r\n\r\n                            return modelsConfig[modelName];\r\n\r\n                        } else {\r\n                            if (cb) {\r\n                                cb(modelsConfig[modelName]);\r\n                            } else {\r\n                                return modelsConfig[modelName];\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    service.getModelElements = function (modelName, skip, limit, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var plural = (data.config.plural || data.config.path + 's' || modelName + 's');\r\n                            var body = {\r\n                                skip: skip,\r\n                                limit: limit\r\n                            };\r\n                            if (service.getShard(modelName)) {\r\n                                body[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.post(prefix + '/' + plural, body).success(function (elements) {\r\n                                cb(elements.result, elements.status.count);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.getModelSchema = function (modelName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            return cb(data.schema);\r\n                        });\r\n                    };\r\n\r\n                    service.getModelConfig = function (modelName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            return cb(data.config);\r\n                        });\r\n                    };\r\n\r\n                    service.postDocument = function (modelName, model, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.post(prefix + '/' + path, JSON.stringify(model)).then(function (response) {\r\n                                return cb(response);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.getUrl = function (modelName, cb) {\r\n                        throw new Error(\"Not implemented\");\r\n                    };\r\n\r\n                    service.getDocument = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        if (!modelName) {\r\n                            return cb();\r\n                        }\r\n                        if (!id) {\r\n                            return cb();\r\n                        }\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var qParams = {\r\n                                params: {\r\n                                    type: \"back\"\r\n                                }\r\n                            };\r\n\r\n                            service.getModelConfig(modelName, function (cfg) {\r\n                                if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                    qParams.params[cfg.shard.shardKey] = shard;\r\n                                } else if (service.getShard(modelName)) {\r\n                                    qParams.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                                }\r\n\r\n                                $http.get(prefix + '/' + path + '/' + id, qParams).success(function (document) {\r\n                                    return cb(document, null);\r\n                                }).error(function (data) {\r\n                                    return cb(null, data);\r\n                                });\r\n                            });\r\n\r\n                        });\r\n                    };\r\n\r\n                    service.putDocument = function (modelName, id, model, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.put(prefix + '/' + path + '/' + id, JSON.stringify(model)).then(function (document) {\r\n                                return cb(document);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.removeDocument = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n\r\n                        service.getModel(modelName, function (data) {\r\n                            var cfg = data.config;\r\n                            var path = (cfg.path || modelName);\r\n\r\n                            var opts = {params: {}};\r\n\r\n                            if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                opts.params[cfg.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                opts.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.delete(prefix + '/' + path + '/' + id, opts).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.removeDocumentByMongoId = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        service.getModel(modelName, function (data) {\r\n                            var cfg = data.config;\r\n                            var path = (data.config.path || modelName);\r\n\r\n                            var opts = {\r\n                                params: {\r\n                                    type: 'raw'\r\n                                }\r\n                            };\r\n\r\n                            if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                opts.params[cfg.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                opts.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.delete(prefix + '/' + path + '/' + id, opts).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.uploadToGallery = function (file, cb) {\r\n                        var path = service.getGalleryPath();\r\n                        Upload.upload({\r\n                            url: path,\r\n                            file: file,\r\n                            fileFormDataName: ['file[]']\r\n                        }).progress(function (evt) {\r\n                            console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                        }).success(function (data, status, headers, config) {\r\n                            cb(data);\r\n                        });\r\n                    }\r\n\r\n                    service.uploadImage = function (modelName, id, fieldName, index, image, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            Upload.upload({\r\n                                url: prefix + '/' + path + '/' + id + '/' + fieldName, //upload.php script, node.js route, or servlet url\r\n                                data: {index: index},\r\n                                file: image,\r\n                                fileFormDataName: ['image']\r\n                            }).progress(function (evt) {\r\n                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                            }).success(function (data, status, headers, config) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.uploadFile = function (modelName, id, fieldName, index, file, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            Upload.upload({\r\n                                url: prefix + '/' + path + '/' + id + '/' + fieldName, //upload.php script, node.js route, or servlet url\r\n                                data: {index: index},\r\n                                file: file,\r\n                                fileFormDataName: ['file']\r\n                            }).progress(function (evt) {\r\n                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                            }).success(function (data, status, headers, config) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.deleteImage = function (modelName, id, index, image, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.delete(prefix + '/' + path + '/' + id + '/image/' + image).then(cb);\r\n                        });\r\n                    };\r\n\r\n\r\n                    service.deleteFile = function (modelName, id, index, file, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.delete(prefix + '/' + path + '/' + id + '/file/' + file).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.getImageUrl = function (modelName, id, imageName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var url = prefix + '/' + path + '/image/' + imageName + common.getRandomQuery();\r\n                            cb(url);\r\n                        });\r\n                    };\r\n\r\n                    service.getFileUrl = function (modelName, id, fileName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var url = prefix + '/' + path + '/file/' + fileName + common.getRandomQuery();\r\n                            cb(url);\r\n                        });\r\n                    };\r\n\r\n                    service.getSingleModel = function (modelName, cb) {\r\n                        if (singlesCache[modelName]) {\r\n                            cb(singlesCache[modelName]);\r\n                        }\r\n                        else {\r\n                            service.search(modelName, {skip: 0, limit: 1}, function (elements, count) {\r\n                                if (count > 0) {\r\n                                    //We only cach if we found THE single document\r\n                                    singlesCache[modelName] = elements[0];\r\n                                    cb(elements[0]);\r\n                                } else {\r\n                                    //Do nothing from now\r\n                                    cb(null);\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n\r\n                    service.search = function (modelName, query, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.plural || modelName);\r\n                            if (shard && config.shard && config.shard.shardKey) {\r\n                                query[config.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.post(prefix + '/' + path, JSON.stringify(query)).success(function (documents) {\r\n                                if (documents.status.search_count !== undefined) {\r\n                                    cb(documents.result, documents.status.search_count);\r\n                                }\r\n                                else {\r\n                                    cb(documents.result, documents.status.count);\r\n                                }\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.export = function (modelName, format, searchQuery, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var query = {};\r\n                            var path = (config.plural || modelName);\r\n                            if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n\r\n                            query.format = format;\r\n                            query.by = config.id;\r\n                            query.query = searchQuery || {};\r\n\r\n                            service.postAsForm(prefix + '/' + path + '/export', query);\r\n                            cb();\r\n                        });\r\n                    };\r\n\r\n                    service.import = function (modelName, format, file, query, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.plural || modelName);\r\n                            if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n\r\n                            query.format = format;\r\n\r\n                            service.postAsForm(prefix + '/' + path + '/import', query, \"POST\", file);\r\n                            cb();\r\n                        });\r\n                    };\r\n\r\n                    service.postAsForm = function (path, params, method, file) {\r\n                        method = method || \"post\"; // Set method to post by default if not specified.\r\n\r\n                        console.log(\"POST AS FORM\", path, params, method, file);\r\n\r\n                        // The rest of this code assumes you are not using a library.\r\n                        // It can be made less wordy if you use one.\r\n                        var form = document.createElement(\"form\");\r\n                        form.setAttribute(\"method\", method);\r\n                        form.setAttribute(\"action\", path + \"?token=\" + $http.defaults.headers.common.Authorization.replace(\"BEARER \", \"\"));\r\n\r\n                        // Open result into a new tab/window:\r\n                        form.setAttribute(\"target\", \"_blank\");\r\n\r\n                        for (var key in params) {\r\n\r\n                            if (params.hasOwnProperty(key)) {\r\n                                var hiddenField = document.createElement(\"input\");\r\n                                hiddenField.setAttribute(\"type\", \"hidden\");\r\n                                hiddenField.setAttribute(\"name\", key);\r\n                                if (typeof(params[key]) == \"object\") {\r\n                                    hiddenField.setAttribute(\"value\", JSON.stringify(params[key]));\r\n                                } else {\r\n                                    hiddenField.setAttribute(\"value\", params[key]);\r\n                                }\r\n\r\n                                form.appendChild(hiddenField);\r\n                            }\r\n                        }\r\n\r\n                        document.body.appendChild(form);\r\n                        form.submit();\r\n                        document.body.removeChild(form);\r\n                    };\r\n\r\n                    service.getGraph = function (modelName, graphID, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.path || modelName);\r\n                            $http.post(prefix + '/' + path + '/graphs/' + encodeURI(graphID)).success(function (data) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n\r\n                    service.galleryGetByPath = function (path, cb) {\r\n                        if (!service.isGalleryEnabled())\r\n                            return\r\n                        $http.get(service.getGalleryPath() + path).success(function (data) {\r\n                            cb(data);\r\n                        });\r\n\r\n                    };\r\n\r\n                    service.galleryDelete = function (path, cb) {\r\n                        if (!service.isGalleryEnabled())\r\n                            return\r\n                        $http.delete(path).success(function (data) {\r\n                            cb(data);\r\n                        });\r\n                    };\r\n\r\n                    service.galleryDeleteByPath = function (path, cb) {\r\n                        if (!service.isGalleryEnabled())\r\n                            return\r\n                        $http.delete(service.getGalleryPath() + path).success(function (data) {\r\n                            cb(data);\r\n                        });\r\n                    };\r\n\r\n                    service.galleryPostByPath = function (path, cb) {\r\n                        Upload.upload({\r\n                            url: service.getGalleryPath() + path,\r\n                            file: \"\",\r\n                            fileFormDataName: ['file[]']\r\n                        }).success(function (data, status, headers, config) {\r\n                            cb(data);\r\n                        });\r\n                    };\r\n\r\n                    service.isGalleryEnabled = function () {\r\n                        return (configs.images && configs.images.gallery && configs.images.gallery.endpoint)\r\n                    };\r\n\r\n                    service.getGalleryPath = function () {\r\n                        var path = configs.images.gallery.endpoint;\r\n                        if (path[0] !== \"/\")\r\n                            path = \"/\" + path;\r\n                        if (path[path.length - 1] !== \"/\")\r\n                            path += \"/\";\r\n                        return prefix + path\r\n                    };\r\n\r\n                    function fieldIsDenormalized(retElem, element) {\r\n                        var ret = null;\r\n\r\n                        // There is no denormalize field list\r\n                        if (!retElem || !retElem.denormalize) {\r\n                            return null;\r\n                        }\r\n\r\n                        // Look for the element as a string and return the position if found\r\n                        var i = retElem.denormalize.indexOf(element);\r\n                        if (i > -1) {\r\n                            return i;\r\n                        }\r\n\r\n                        // Look for the element as an object with target and source, return the position if found\r\n                        for (i = 0; i < retElem.denormalize.length; i++) {\r\n                            if (typeof(retElem.denormalize[i]) === 'object' && retElem.denormalize[i].target == element) {\r\n                                ret = i;\r\n                            }\r\n                        }\r\n                        return ret;\r\n                    }\r\n\r\n                    /**\r\n                     * Obtains point separated field {{field}} from schema {{schema}}\r\n                     * @param field\r\n                     * @param schema\r\n                     * @returns {*}\r\n                     */\r\n                    service.getFieldFromSchema = function (field, schema) {\r\n                        if (schema[field]) {\r\n                            return schema[field];\r\n                        } else {\r\n                            var elements = field.split('.');\r\n                            var retElem;\r\n\r\n                            for (var i in elements) {\r\n                                var denormalizedFieldPosition = fieldIsDenormalized(retElem, elements[i]);\r\n\r\n                                if (retElem && retElem.properties) {\r\n                                    retElem = retElem.properties[elements[i]];\r\n                                } else if (retElem && retElem.ref && denormalizedFieldPosition != null) {\r\n                                    var source;\r\n                                    var target;\r\n\r\n                                    var denormalizedField = retElem.denormalize[denormalizedFieldPosition];\r\n                                    if (typeof(denormalizedField) === 'string') {\r\n                                        source = denormalizedField;\r\n                                        target = denormalizedField;\r\n                                    } else {\r\n                                        source = denormalizedField.source;\r\n                                        target = denormalizedField.target;\r\n                                    }\r\n\r\n                                    var refSchema = service.getModel(retElem.ref);\r\n                                    retElem = angular.copy(service.getFieldFromSchema(source, refSchema.schema));\r\n                                    if (retElem && retElem.title) {\r\n                                        var index = field.lastIndexOf(\".\");\r\n                                        retElem.title = common.prettifyTitle(field.substring(0, index) + '.' + retElem.title);\r\n                                    }\r\n                                } else {\r\n                                    retElem = schema[elements[i]];\r\n                                }\r\n                            }\r\n\r\n                            return retElem;\r\n                        }\r\n                    };\r\n\r\n                    angular.forEach(Object.keys(overrides), function (key) {\r\n                        service[key] = overrides[key];\r\n                    });\r\n\r\n                    return service;\r\n                }];\r\n            }\r\n        );\r\n}());\r\n\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .factory('selectCacheService', function () {\n            return {\n                TIMEOUT_MS: 750,\n                timers: {},\n                cache: {}\n            };\n        })\n        .provider('selectCache', function () {\n            this.$get = ['$rootScope', 'models', 'selectCacheService', function ($rootScope, models, selectCacheService) {\n                var provider = {};\n\n                $rootScope.$on('$routeChangeStart', function (event, next, current) {\n                    if (next != current) {\n                        selectCacheService.cache = {};\n                        angular.forEach(Object.keys(selectCacheService.timers), function (m) {\n                            clearTimeout(selectCacheService.timers[m]);\n                            delete selectCacheService.timers[m];\n                        });\n                        //console.log(\"[SelectCache] CACHE CLEARED\");\n                    }\n                });\n\n                provider.search = function (modelName, b, shard, cb) {\n                    var body = JSON.stringify(b);\n                    //console.log(\"[SelectCache] POST FROM SELECT\", modelName, b);\n\n                    if (!selectCacheService.cache[modelName]) {\n                        selectCacheService.cache[modelName] = {};\n                    }\n\n                    if (!selectCacheService.cache[modelName].posts) {\n                        selectCacheService.cache[modelName].posts = {};\n                    }\n\n                    var cached = selectCacheService.cache[modelName].posts[body];\n                    if (!cached) {//A new query\n                        selectCacheService.cache[modelName].posts[body] = {}; //CALLBACKS\n                        selectCacheService.cache[modelName].posts[body].cbks = [cb]; //CALLBACKS\n\n                        //console.log(\"[SelectCache] >>>>>>>>>>>>>> HTTP POST\", modelName, b);\n                        models.search(modelName, b, shard, function (response, count) {\n                            //console.log(\"[SelectCache] POST SELECT RESULT\", modelName, b, {\n                            //    count: count,\n                            //    response: response\n                            //});\n                            selectCacheService.cache[modelName].posts[body].res = {\n                                response: response,\n                                count: count\n                            };\n                            angular.forEach(selectCacheService.cache[modelName].posts[body].cbks, function (cbk) {\n                                cbk(response, count);\n                            });\n                            selectCacheService.cache[modelName].posts[body].cbks = [];\n                        });\n\n                    } else if (!cached.res && cached.cbks) {//Not finished query\n                        cached.cbks.push(cb);\n                        //console.log(\"[SelectCache] ADDED CB FOR POST\", modelName, b);\n                    } else { //Finished query\n                        cached.cbks.push(cb);\n                        angular.forEach(cached.cbks, function (cbk) {\n                            //console.log(\"[SelectCache] CACHED POST\", modelName, b, {\n                            //    count: cached.res.count,\n                            //    response: cached.res.response\n                            //});\n                            cbk(cached.res.response, cached.res.count);\n                        });\n                        cached.cbks = [];\n                    }\n                };\n\n                provider.getDocument = function (modelName, id, shard, cb) {\n                    //console.log(\"[SelectCache] GET FROM SELECT\", modelName, id);\n\n                    if (!selectCacheService.cache[modelName]) {\n                        selectCacheService.cache[modelName] = {};\n                    }\n\n                    if (!selectCacheService.cache[modelName].gets) {\n                        selectCacheService.cache[modelName].gets = {};\n                    }\n\n                    if (id) {\n                        if (!selectCacheService.cache[modelName].gets[id]) {\n                            selectCacheService.cache[modelName].gets[id] = {};\n                        }\n\n                        if (!selectCacheService.cache[modelName].gets[id].cbks) {\n                            selectCacheService.cache[modelName].gets[id].cbks = [];\n                        }\n\n                        if (selectCacheService.cache[modelName].gets[id].result) {\n                            //console.log(\"[SelectCache] CACHED VALUE\", modelName, id, selectCacheService.cache[modelName].gets[id].result);\n                            cb(selectCacheService.cache[modelName].gets[id].result);\n                        } else if (selectCacheService.cache[modelName].gets[id].cbks.indexOf(cb) == -1) {\n                            selectCacheService.cache[modelName].gets[id].cbks.push(cb);\n                            //console.log(\"[SelectCache] ADDED CB FOR GET\", modelName, id);\n\n                            if (selectCacheService.timers[modelName]) {\n                                clearTimeout(selectCacheService.timers[modelName]);\n                            }\n\n                            //TODO: Possible bug, ASYNC MODELNAME && SHARD !!!!!\n                            selectCacheService.timers[modelName] = setTimeout(function(){\n                                httpCall(modelName, shard);\n                            }, selectCacheService.TIMEOUT_MS);\n                        }\n                    } else{\n                        //WE HAVE TO RELEASE THE GETDOCUMENT CALLBACK!!!\n                        cb();\n                    }\n                };\n\n                function httpCall(model, shard) {\n                    models.getModelConfig(model, function (cfg) {\n                        var q = {};\n                        if (shard && cfg.shard.shardKey) {\n                            q[cfg.shard.shardKey] = shard;\n                        }\n\n                        var keys = Object.keys(selectCacheService.cache[model].gets);\n                        if (keys.length == 1) {\n                            q[cfg.id] = keys[0];\n                        } else {\n                            q.$or = [];\n                            angular.forEach(keys, function (id) {\n                                if (!selectCacheService.cache[model].gets[id].result) {\n                                    var singleQ = {};\n                                    singleQ[cfg.id] = id;\n                                    q.$or.push(singleQ);\n                                }\n                            });\n                        }\n\n                        //console.log(\"[SelectCache] >>>>>>>>>>>>>> HTTP GETS\", model, q);\n                        models.search(model, {query: q}, function (result, count) {\n                            //console.log(\"[SelectCache] GET SELECT RESULT\", model, q, result);\n                            angular.forEach(result, function (doc) {\n                                var id = doc[cfg.id];\n                                selectCacheService.cache[model].gets[id].result = doc;\n                            });\n\n                            angular.forEach(Object.keys(selectCacheService.cache[model].gets), function (idKey) {\n                                var getObj = selectCacheService.cache[model].gets[idKey];\n                                if (getObj.cbks) {\n                                    angular.forEach(getObj.cbks, function (cb) {\n                                        cb(getObj.result);\n                                    });\n                                    delete getObj.cbks;\n                                }\n                            });\n                        });\n                    });\n                }\n\n                return provider;\n            }];\n        });\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('httpResponseInterceptor', ['$q', '$location', '$routeParams', 'flash', '$injector', 'configs', function ($q, $location, $routeParams, flash, $injector, configs) {\r\n\r\n            return {\r\n                response: function (response) {\r\n                    //console.log(response);\r\n                    if (response.headers(\"routeinjector\") && (response.headers(\"routeinjector\") !== configs.backoffice.version)) {\r\n                        var ngDialog = $injector.get(\"ngDialog\");\r\n                        if (ngDialog.getOpenDialogs().length === 0) {\r\n                            ngDialog.open({\r\n                                template: \"dialogVersionMismatch\",\r\n                                className: 'ngdialog-theme-default ngdialog-theme-custom'\r\n                            });\r\n                        }\r\n                    }\r\n                    if (response.status === 401) {\r\n                        console.log(\"Response 401\");\r\n                    } else if (response.status === 201) {\r\n                        if (configs.images && configs.images.gallery && configs.images.gallery.endpoint && response.config.url.indexOf(configs.images.gallery.endpoint) == 0) {\r\n                            return response || $q.when(response);\r\n                        }\r\n                        flash.success(\"Done\", \"Document saved successfully\");\r\n                    }\r\n                    return response || $q.when(response);\r\n                },\r\n                responseError: function (rejection) {\r\n\r\n                    var models = $injector.get(\"models\");\r\n\r\n                    var modelName = $routeParams.schema;\r\n                    var modelId = $routeParams.id;\r\n\r\n                    var errorInReferencedProperty;\r\n                    var prefix = configs.app.prefix;\r\n\r\n                    if (modelName) {\r\n                        models.getModelConfig(modelName, function (model) {\r\n                            var path = \"/\" + model.path + \"/\" + modelId;\r\n                            if (prefix) {\r\n                                path = \"/\" + path;\r\n                            }\r\n\r\n                            errorInReferencedProperty = path !== rejection.config.url;\r\n                            handleError(errorInReferencedProperty);\r\n\r\n                        });\r\n                    } else {\r\n                        handleError(true);\r\n                    }\r\n\r\n                    function handleError(ignoreError) {\r\n                        function redirectError() {\r\n                            if ($location.url() != \"/login\" && $location.url() != \"/logout\" && $location.url() != \"/\") {\r\n                                if ($routeParams.schema) {\r\n                                    $location.path('/model/' + $routeParams.schema);\r\n                                } else {\r\n                                    $location.path('/');\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (rejection.status === 401) {\r\n                            console.log(\"Response Error 401\", rejection);\r\n                            redirectError();\r\n\r\n                            if ($location.url() != \"/login\") {\r\n                                flash.error(\"Unauthorized\", JSON.stringify(rejection.data));\r\n                            }\r\n                        } else if (rejection.status === 500) {\r\n                            flash.error(\"Internal server error\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 400) {  //Client error\r\n                            flash.error(\"Bad Request\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 404 && !ignoreError) {\r\n                            redirectError();\r\n                            flash.error(\"Not Found\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 404 && ignoreError) {\r\n                            flash.warning(\"Property Not Found\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 403) {\r\n                            if (rejection.data && rejection.data.errors) {\r\n                                var errors = [];\r\n                                angular.forEach(Object.keys(rejection.data.errors), function (e) {\r\n                                    errors.push(\"<strong>\" + e + \"</strong> validation failed. Caused by: \" + rejection.data.errors[e].message);\r\n                                });\r\n                                errors.splice(0, 0, \"Validation Error \" + rejection.status + \"\");\r\n                                flash.error.apply(this, errors);\r\n                            } else {\r\n                                flash.error(\"Validation Error \" + rejection.status + \"\", JSON.stringify(rejection.data));\r\n                            }\r\n                        } else if (Math.floor(rejection.status / 100) == 4 || Math.floor(rejection.status / 100) == 5) {\r\n                            redirectError();\r\n                            flash.error(\"Error \" + rejection.status, JSON.stringify(rejection.data));\r\n                        }\r\n                    }\r\n\r\n                    return $q.reject(rejection);\r\n                }\r\n            };\r\n        }\r\n        ])\r\n        .config(['$httpProvider', function ($httpProvider) {\r\n            //Http Interceptor to check failures\r\n            $httpProvider.interceptors.push('httpResponseInterceptor');\r\n        }]);\r\n}());\r\n\n//(function () {\r\n//    'use strict';\r\n//    angular.module('injectorApp')\r\n//        .factory('flash', function ($rootScope) {\r\n//            var queue = [];\r\n//            var currentMessage = \"\";\r\n//\r\n//            $rootScope.$on(\"$routeChangeSuccess\", function () {\r\n//                currentMessage = queue.shift() || \"\";\r\n//            });\r\n//\r\n//            return {\r\n//                setMessage: function (message) {\r\n//                    queue.push(message);\r\n//                },\r\n//                getMessage: function () {\r\n//                    return currentMessage;\r\n//                }\r\n//            };\r\n//        });\r\n//}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('dependsOn', ['$http', 'configs', 'common', 'models', function ($http, configs, common, models) {\r\n        var factory = {};\r\n\r\n        factory.find = function (obj) {\r\n            var depArr = [];\r\n            function innerDependsOn(obj, index) {\r\n                if (typeof obj == \"object\") {\r\n                    $.each(obj, function (k, v) {\r\n                        // k is either an array index or object key\r\n                        if (k == 'dependsOn') {\r\n                            depArr.push({\r\n                                path: index,\r\n                                field: v.field,\r\n                                params: v.params,\r\n                                func: v.func\r\n                            });\r\n                        }\r\n                        if (!index) {\r\n                            index = k;\r\n                        }\r\n                        else {\r\n                            index = index + '.' + k;\r\n                        }\r\n                        innerDependsOn(v, index);\r\n                        var indexArray = index.split('.');\r\n                        indexArray.pop();\r\n                        index = indexArray.join('.');\r\n                    });\r\n                }\r\n                else {\r\n                    var indexArray = index.split('.');\r\n                    indexArray.pop();\r\n                    index = indexArray.join('.');\r\n                }\r\n            }\r\n\r\n            innerDependsOn(obj);\r\n            return depArr;\r\n        };\r\n\r\n        factory.apply = function (scope, modelName, doc) {\r\n            function updateFunc(modelConfig, dependsValue, arrayIndex) {\r\n                return function(newVal, oldVal) {\r\n                    if (newVal) {\r\n                        //configs.getRoutesConfig(function (c) {\r\n                            var url = configs.app.prefix + '/_' + modelConfig.path + '/' + dependsValue.func ;\r\n                            var body = {};\r\n                            angular.forEach(dependsValue.params, function (param) {\r\n                                body[param]= safeAccess(doc, param);\r\n                            });\r\n\r\n                            /*if(arrayIndex !== undefined){ //TODO: I'm not sure...\r\n                                url += '/' + arrayIndex;\r\n                            }*/\r\n\r\n                            $http.post(url, body).success(function (data) {\r\n                                var replaced = dependsValue.path.replace(/properties\\./g, '');\r\n\r\n                                if(arrayIndex !== undefined){\r\n                                    replaced = replaced.replace(/\\.items/g, '[' + arrayIndex + ']');\r\n                                }\r\n\r\n                                common.setField(replaced, doc, data);\r\n                            });\r\n                        //});\r\n                    }\r\n                };\r\n            }\r\n\r\n\r\n            models.getModel(modelName, function (m) {\r\n                var depArr = factory.find(m.schema);\r\n                $.each(depArr, function (k, v) {\r\n                    if ((/(this\\.)/).test(v.field)) {\r\n                        var path = v.path.replace(/properties\\./g, '');\r\n                        var root = path.split('.')[0];\r\n                        var targetField = v.field.replace(/(this\\.)/, \"\");\r\n\r\n                        if ((/(items)/).test(path)) { //Is an array\r\n                            scope.$watchCollection(\"model.\" + root, function (nV, oV) {\r\n                                if (nV && nV instanceof Array) {\r\n                                    for (var i in nV) {\r\n                                        var normPath = root + \"[\" + i + \"].\" + targetField;\r\n                                        for (var p in v.params) {\r\n                                            v.params[p] = normPath;\r\n                                        }\r\n                                        scope.$watch(\"model.\" + normPath, updateFunc(m.config, angular.copy(v), angular.copy(i)));\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else{ // Is an object\r\n                            var normPath = root + \".\" + targetField;\r\n                            scope.$watch('model' + '.' + normPath, updateFunc(m.config, angular.copy(v)));\r\n                        }\r\n                    } else {\r\n                        scope.$watch('model' + '.' + v.field, updateFunc(m.config, v));\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        return factory;\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('common', ['$rootScope', function ($rootScope) {\r\n\r\n            var factory = {};\r\n\r\n            factory.hasAngularVariable = function (url) {\r\n                return (/\\{{(.*)\\}}/).test(url);\r\n            };\r\n\r\n            factory.deAngularizeUrl = function (doc, url) {\r\n                return url.replace(/\\{{(.*)\\}}/g, function (ng, matched) {\r\n\r\n                    var f = factory.getField(matched, doc);\r\n                    return f;\r\n                });\r\n            };\r\n\r\n            factory.getAngularVariables = function (url) {\r\n                return /\\{{(.*)\\}}/.exec(url)[1];\r\n            };\r\n\r\n            factory.prettifyTitle = function (title, separator) {\r\n                title = title || \"\";\r\n                separator = separator || \".\";\r\n                return title\r\n                    // look for \".\"  user.age will be User -> Age\r\n                    //TODO: Look for separator instead of \".\"\r\n                    .replace(/(\\.([a-z]|[A-Z]))/g, function (str) {\r\n                        return \" <i class='fa fa-angle-right'></i> \" + str.replace(\".\", \"\").toUpperCase();\r\n                    })\r\n                    // insert a space before all caps\r\n                    .replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) {\r\n                        return str.toUpperCase();\r\n                    });\r\n            };\r\n\r\n            /**\r\n             * Gets field value in point separated {{field}} from the model {{element}}. Also accepts [] notation.\r\n             * @param field\r\n             * @param element\r\n             * @returns {*}\r\n             */\r\n            factory.getField = function (field, element) {\r\n                if (element) {\r\n                    var splitted = field.split('.');\r\n                    if (splitted instanceof Array && splitted.length > 0) {\r\n                        var ret = element;\r\n                        var returnArray;\r\n                        var parentArr;\r\n                        for (var path in splitted) {\r\n\r\n                            //Method for extract array[].a fields or array[0].a fields.\r\n                            if ((/(\\[\\d*\\])/).test(splitted[path])) {\r\n                                //Is an array !!!\r\n                                var rootElem = splitted[path].replace(/(\\[\\d*\\])/, \"\");\r\n                                var index = splitted[path].match(/(\\d*)(?=\\])/)[0];\r\n\r\n                                if (ret) {\r\n                                    if (index) {\r\n                                        ret = ret[rootElem][index];\r\n                                    }\r\n                                    else {\r\n                                        parentArr = rootElem;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (parentArr) {\r\n                                    var tmp = ret;\r\n                                    returnArray = [];\r\n                                    for (var elem in tmp[parentArr]) {\r\n                                        returnArray.push(tmp[parentArr][elem][splitted[path]]);\r\n                                    }\r\n                                } else {\r\n                                    if (ret) {\r\n                                        ret = ret[splitted[path]];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (returnArray) {\r\n                            return returnArray;\r\n                        }\r\n                        return ret;\r\n                    } else {\r\n                        return element[field];\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Sets value {{value}} to model {{model}} in the point separated field {{field}}\r\n             * @param field\r\n             * @param model\r\n             * @param value\r\n             */\r\n            factory.setField = function (field, model, value) {\r\n                if (model) {\r\n                    var splitted = field.split('.');\r\n                    if (splitted instanceof Array && splitted.length > 0) {\r\n                        var ref = model;\r\n                        for (var i = 0; i < splitted.length; i++) {\r\n                            var path = splitted[i];\r\n                            if ((/(\\[\\d*\\])/).test(path)) {\r\n                                var rootElem = path.replace(/(\\[\\d*\\])/, \"\");\r\n                                var index = path.match(/(\\d*)(?=\\])/)[0];\r\n\r\n                                var newPath;\r\n                                if (index === undefined) {\r\n                                    for (var arrInd in ref[rootElem]) {\r\n                                        newPath = splitted[i + 1];\r\n                                        factory.setField(newPath, ref[rootElem][arrInd], value);\r\n                                    }\r\n                                } else {\r\n                                    newPath = splitted[i + 1];\r\n                                    factory.setField(newPath, ref[rootElem][index], value);\r\n                                }\r\n                            } else {\r\n                                if (i < splitted.length - 1) {\r\n                                    if (!ref[path]) {\r\n                                        ref[path] = {};\r\n                                    }\r\n                                    ref = ref[path];\r\n                                } else {\r\n                                    ref[path] = value;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Obtains all the keys of an schema (using {{separator}} as nested level indicator)\r\n             * @param schema\r\n             * @param separator\r\n             * @returns {Array}\r\n             */\r\n            factory.getAllSchemaFields = function (schema, separator) {\r\n                separator = separator || \".\";\r\n                var fields = [];\r\n\r\n                function searchFields(obj, parent) {\r\n                    var keys = Object.keys(obj);\r\n                    angular.forEach(keys, function (k) {\r\n                        if (obj[k].properties) {\r\n                            searchFields(obj[k].properties, parent ? (parent + separator + k) : k);\r\n                        } else if (obj[k].denormalize) {\r\n                            if(Array.isArray(obj[k].denormalize)) {\r\n                                angular.forEach(obj[k].denormalize, function(field) {\r\n                                    if(typeof(field) !== 'object') {\r\n                                        fields.push((parent ? (parent + separator) : \"\") + k + separator + field);\r\n                                    } else {\r\n                                        fields.push(\r\n                                            (parent ? (parent + separator) : \"\") + k + separator + field.target\r\n                                        );\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                fields.push((parent ? (parent + separator) : \"\") + k);\r\n                            }\r\n                        } else {\r\n                            fields.push(parent ? (parent + separator + k) : k);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                searchFields(schema);\r\n\r\n                return fields;\r\n            };\r\n\r\n            /**\r\n             * Process the form and returns the schema form for the schemaForm module\r\n             * @param form\r\n             * @param submitButtons\r\n             * @returns {*|string[]}\r\n             */\r\n            factory.processForm = function (form, submitButtons) {\r\n                var showSubmitButtons = (submitButtons === undefined || submitButtons);\r\n                var innerForm;\r\n\r\n                if (form && form.tabs) {\r\n                    innerForm = innerForm || [];\r\n                    innerForm.push({\r\n                        \"type\": \"tabs\",\r\n                        \"tabs\": form.tabs\r\n                    });\r\n                } else if (form && form.items) {\r\n                    innerForm = form.items;\r\n                }\r\n\r\n                innerForm = innerForm || [\"*\"];\r\n\r\n                //TODO: Keep this comment out to wait if someone complains of missing feature\r\n                //if (showSubmitButtons) {\r\n                //    var hasSubmitButton = false;\r\n                //    angular.forEach(innerForm, function (item) {\r\n                //        if (item.type == \"submit\") {\r\n                //            hasSubmitButton = true;\r\n                //        }\r\n                //    });\r\n                //\r\n                //    if (!hasSubmitButton) {\r\n                //        innerForm.push({\r\n                //            type: \"submit\",\r\n                //            title: \"Save\"\r\n                //        });\r\n                //    }\r\n                //\r\n                //}\r\n\r\n                return innerForm;\r\n            };\r\n\r\n            factory.randomNumber = function () {\r\n                return (new Date()).getTime();\r\n            };\r\n\r\n            factory.getRandomQuery = function () {\r\n                return '?r=' + factory.randomNumber();\r\n            };\r\n\r\n            return factory;\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('search', ['$rootScope', 'models', function ($rootScope, models) {\r\n            var query = {};\r\n\r\n            return {\r\n                setQuery: function (q) {\r\n                    query.query = q;\r\n                },\r\n                clearQuery: function() {\r\n                    this.setQuery({});\r\n                },\r\n                getQuery: function () {\r\n                    return query.query;\r\n                },\r\n                setSortBy: function (sort) {\r\n                    query.sortBy = sort;\r\n                },\r\n                addSortBy: function(field, asc) {\r\n                    query.sortBy = {};\r\n                    query.sortBy[field] = asc ? 1 : -1;\r\n                },\r\n                getSort: function(field) {\r\n                    if(query.sortBy) {\r\n                        return query.sortBy[field];\r\n                    } else {\r\n                        return undefined;\r\n                    }\r\n                },\r\n                setSkip: function(skip){\r\n                    query.skip = skip;\r\n                },\r\n                setLimit: function(limit){\r\n                    query.limit = limit;\r\n                },\r\n                search: function (schema,  callback) {\r\n                    models.search(schema, query, function (elements, count) {\r\n                        callback(elements, count, null);\r\n                    });\r\n                },\r\n                searchAndGroup: function(schema, callback) {\r\n                    //TODO: Montar la query con grupos\r\n                    //TODO: Volver al modelController y añadir una columna de grupo (p.ej. count)\r\n                    //TODO: Pintar !!\r\n                }\r\n            };\r\n\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .directive('sideMenu', function () {\r\n            return {\r\n                restrict: 'E',\r\n                scope: false,\r\n                templateUrl: 'html/side-menu.html',\r\n                controller: ['$scope', '$routeParams', '$location', 'common', 'models', 'customMenu', '$window', '$rootScope', function ($scope, $routeParams, $location, common, models, customMenu, $window, $rootScope) {\r\n                    $scope.common = common;\r\n                    $scope.$on(\"$routeChangeStart\", function (event, next, current) {\r\n                        if (next.params.schema) {\r\n                            $scope.actualSchema = next.params.schema;\r\n                        }\r\n                    });\r\n                    $scope.isDisabled = false;\r\n                    $scope.isOpen = false;\r\n\r\n                    var render = function () {\r\n                        $scope.sections = new Sections();\r\n\r\n                        angular.forEach(customMenu, function (elem) {\r\n                            $scope.sections.add(elem.section, elem.title, elem);\r\n                        });\r\n\r\n                        if (models.isGalleryEnabled()) {\r\n                            $scope.sections.add(\"Gallery\", \"Gallery\", {\r\n                                clickTo: \"gallery\"\r\n                            });\r\n                        }\r\n\r\n                        models.getModels(function (m) {\r\n                            angular.forEach(m, function (schema) {\r\n                                models.getModelConfig(schema, function (config) {\r\n                                    if (!config.hideMenu) {\r\n                                        if (config.isSingle) {\r\n                                            models.getSingleModel(schema, function (doc) {\r\n                                                if (doc) {\r\n                                                    config.clickTo = \"model/\" + schema + \"/update/\" + doc[config.id];\r\n                                                } else {\r\n                                                    config.clickTo = \"model/\" + schema + \"/new\";\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            config.clickTo = \"model/\" + schema;\r\n                                        }\r\n                                        var menuTitle = config.title || schema;\r\n                                        $scope.sections.add(config.section, menuTitle, config);\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    };\r\n\r\n\r\n                    render();\r\n                    $rootScope.$on('invalidate', function () {\r\n                        render();\r\n                    });\r\n\r\n                    $scope.openSection = function (section) {\r\n                        $scope.actualSection = section;\r\n                    };\r\n\r\n                    $scope.click = function (section, name, conf) {\r\n                        $scope.parentSchema = section;\r\n                        $scope.actualSchema = name;\r\n                        $scope.actualSection = conf.section || section;\r\n                        if (conf.clickTo) {\r\n                            $location.path(conf.clickTo);\r\n                        } else if (conf.url) {\r\n                            $window.location.href = conf.url;\r\n                        }\r\n\r\n                        $scope.isMenuCollapsed = true;\r\n                    };\r\n\r\n                    $scope.isInstanceOf = function (obj) {\r\n                        return (obj instanceof Section);\r\n                    };\r\n\r\n                    $scope.debug = function (a, b) {\r\n                        console.log(a, b);\r\n                    };\r\n                }]\r\n            };\r\n        });\r\n}());\r\n\r\nvar Section = function () {\r\n};\r\nvar Sections = function () {\r\n\r\n\r\n    var menu = {};\r\n\r\n    this.get = function () {\r\n        return orderKeys(menu);\r\n    };\r\n\r\n\r\n    this.add = function (key, schema, config) {\r\n        /**\r\n         * Dot notation loop: http://stackoverflow.com/a/10253459/607354\r\n         */\r\n        var levels = key.split(\".\");\r\n        var curLevel = menu;\r\n        var i = 0;\r\n        while (i < levels.length - 1) {\r\n            if (typeof curLevel[levels[i]] === 'undefined') {\r\n                curLevel[levels[i]] = new Section();\r\n            }\r\n\r\n            curLevel = curLevel[levels[i]];\r\n            i++;\r\n        }\r\n\r\n        curLevel[levels[levels.length - 1]] = curLevel[levels[levels.length - 1]] || new Section();\r\n        curLevel[levels[levels.length - 1]][schema] = config;\r\n    };\r\n};\r\nfunction orderKeys(obj) {\r\n\r\n    var keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\r\n        if (k1 < k2) return -1;\r\n        else if (k1 > k2) return +1;\r\n        else return 0;\r\n    });\r\n\r\n    var i, after = {};\r\n    for (i = 0; i < keys.length; i++) {\r\n        after[keys[i]] = obj[keys[i]];\r\n        delete obj[keys[i]];\r\n    }\r\n\r\n    for (i = 0; i < keys.length; i++) {\r\n        if(Object.keys(after[keys[i]]).length > 1){\r\n            obj[keys[i]] = orderKeys(after[keys[i]]);\r\n        } else {\r\n            obj[keys[i]] = after[keys[i]];\r\n        }\r\n    }\r\n    return obj;\r\n}\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .directive('scrollToItem', function () {\n            return {\n                restrict: 'A',\n                scope: {\n                    scrollTo: \"@\"\n                },\n                link: function (scope, $elm, attr) {\n\n                    $elm.on('click', function () {\n                        $('html,body').animate({scrollTop: $(scope.scrollTo).offset().top}, \"slow\");\n                    });\n                }\n            };\n        });\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .directive('compile', ['$compile', function($compile) {\r\n        // directive factory creates a link function\r\n        return function(scope, element, attrs) {\r\n            scope.$watch(\r\n                function(scope) {\r\n                    // watch the 'compile' expression for changes\r\n                    return scope.$eval(attrs.compile);\r\n                },\r\n                function(value) {\r\n                    // when the 'compile' expression changes\r\n                    // assign it into the current DOM\r\n                    element.html(value);\r\n\r\n                    // compile the new DOM and link it to the current\r\n                    // scope.\r\n                    // NOTE: we only compile .childNodes so that\r\n                    // we don't get into infinite loop compiling ourselves\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            );\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp').directive('injectorPunchcard', ['$routeParams', 'models', function ($routeParams, models) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: true,\r\n            templateUrl: 'js/directives/injector-punchcard/injector-punchcard.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var modelName = $routeParams.schema;\r\n                models.getGraph(modelName, attrs.graph, function(data){\r\n                    scope.elements = Object.keys(data);\r\n                    scope.selected = scope.elements[0];\r\n                    scope.punchCardData = data[scope.selected];\r\n                    scope.$watch('selected', function(selected){\r\n                       scope.punchCardData = data[selected];\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp').directive('injectorBargraph', ['$routeParams', 'models', function ($routeParams, models) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: true,\r\n            templateUrl: 'js/directives/injector-bargraph/injector-bargraph.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n\r\n                var modelName = $routeParams.schema;\r\n                models.getModelConfig(modelName, function (config) {\r\n                    models.getGraph(modelName, attrs.graph, function (data) {\r\n\r\n                        var graph = {};\r\n                        for(var i in config.graphs){\r\n                            var g = config.graphs[i];\r\n\r\n                            if(g.title == attrs.graph){\r\n                                graph = g;\r\n                            }\r\n                        }\r\n\r\n                        scope.elements = Object.keys(data);\r\n                        scope.selected = scope.elements[0];\r\n\r\n                        if(graph.groupMode == \"series\"){\r\n                            scope.selectEnabled = false;\r\n\r\n                        } else if(graph.groupMode == \"select\"){\r\n                            scope.selectEnabled = true;\r\n                        } else{\r\n                            console.error(\"Invalid configuration at bargraph group Mode:\", graph.groupMode);\r\n                        }\r\n\r\n                        if (scope.selectEnabled === true) {\r\n                            //GroupedBy with select2 !!\r\n                            scope.barsData = [\r\n                                {\r\n                                    key: scope.selected,\r\n                                    values: data[scope.selected]\r\n                                }\r\n                            ];\r\n\r\n                            scope.$watch('selected', function (selected) {\r\n                                if (scope.selectEnabled === true) {\r\n                                    scope.barsData = [\r\n                                        {\r\n                                            key: selected,\r\n                                            values: data[selected]\r\n                                        }\r\n                                    ];\r\n                                }\r\n                            });\r\n\r\n                        } else {\r\n                            //Grouped by in legend !\r\n                            scope.barsData = [];\r\n                            for (var key in data) {\r\n                                scope.barsData.push(\r\n                                    {\r\n                                        key: key,\r\n                                        values: data[key]\r\n                                    });\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp').directive('modelButtons', ['$routeParams', '$http', '$q', '$route', 'models', '$location', function ($routeParams, $http, $q, $route, models, $location) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: false, //Use the parent scope, in this case the modelController (this directive always will be loaded in the model page!)\r\n            //If not, we should set scope to true and implement here all the functions\r\n            templateUrl: 'js/directives/model-buttons/model-buttons.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.performAction = function (action) {\r\n                    if (action.type && action.type == \"form\") {\r\n                        //post as form\r\n                        models.postAsForm(action.path, action.data, 'post');\r\n                    } else if (action.type && action.type == \"location\") {\r\n                        $location.path(action.location);\r\n                    } else {\r\n                        var req = {\r\n                            method: action.method,\r\n                            url: action.path,\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            data: action.data\r\n                        };\r\n\r\n                        $http(req);\r\n                    }\r\n                };\r\n\r\n                function exportElements() {\r\n                    var checked = scope.elements.filter(function (x) {\r\n                        return x.checked;\r\n                    });\r\n\r\n                    if (checked && checked.length > 0) {\r\n                        var query = {$or: []};\r\n                        angular.forEach(checked, function (elem) {\r\n                            query.$or.push({_id: elem._id});//We search by id\r\n                        });\r\n                        return query;\r\n                    } else {\r\n                        return scope.query;\r\n                    }\r\n                }\r\n\r\n                scope.export = function exportModels(format) {\r\n                    models.export(scope.schema, format, exportElements(), function (doc) {\r\n                    });\r\n                };\r\n\r\n\r\n                scope.import = function importModels(format) {\r\n                    console.log(\"IMPORT\", format, scope.schema);\r\n                    var file = \"\";\r\n                    models.import(scope.schema, format, file, function (doc) {\r\n                    });\r\n                };\r\n\r\n                scope.enableDelete = function () {\r\n                    if (!scope.elements) {\r\n                        return false;\r\n                    }\r\n                    var checkedValues = scope.elements.filter(function (val) {\r\n                        return val.checked;\r\n                    });\r\n\r\n                    return checkedValues.length > 0;\r\n                };\r\n\r\n                scope.removeSelected = function removeSelected() {\r\n                    var checkedValues = scope.elements.filter(function (val) {\r\n                        return val.checked;\r\n                    });\r\n\r\n                    if (checkedValues.length > 0) {\r\n                        scope.promptAlert(function (del) {\r\n                            if (del) {\r\n                                var deletions = [];\r\n                                angular.forEach(checkedValues, function (element) {\r\n                                    var deferred = $q.defer();\r\n                                    deletions.push(deferred.promise);\r\n\r\n                                    models.getModelConfig(scope.schema, function (cfg) {\r\n                                        var shard;\r\n\r\n                                        if (cfg.shard && cfg.shard.shardKey) {\r\n                                            shard = element[cfg.shard.shardKey];\r\n                                        }\r\n\r\n                                        if (scope.isDisabled(element)) {\r\n                                            models.removeDocumentByMongoId(scope.schema, element._id, shard, function (doc) {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                        } else {\r\n                                            models.removeDocument(scope.schema, scope.id(element), shard, function (doc) {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                });\r\n                                $q.all(deletions).then(function () {\r\n                                    $route.reload();\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .directive('searchInModel', ['$routeParams', 'models', 'common', 'search', function ($routeParams, models, common, search) {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: false,\r\n                templateUrl: 'js/directives/search-model/search-model.html',\r\n                link: function (scope, element, attrs, ngModel) {\r\n                    scope.searches = [];\r\n                    scope.models = models;\r\n                    var modelName = $routeParams.schema;\r\n\r\n                    scope.buildPath = function (field, schema) {\r\n                        var sc = models.getFieldFromSchema(field, schema);\r\n                        var title;\r\n                        if (sc && sc.title) {\r\n                            var i = field.lastIndexOf(\".\");\r\n                            if (i > -1 && sc.title.indexOf(\"<i\") == -1) {//TODO: ÑAPA DE LAS GUAPAS, ESTO HAY QUE CAMBIARLO\r\n                                title = common.prettifyTitle(field.substring(0, i) + '.' + sc.title);\r\n                            } else {\r\n                                title = sc.title;\r\n                            }\r\n\r\n                        } else {\r\n                            title = common.prettifyTitle(field);\r\n                        }\r\n\r\n                        return title;\r\n                    };\r\n\r\n                    scope.updateSearch = function (elemSearch, field, noSearch) {\r\n                        var index;\r\n                        if (elemSearch.field) {\r\n                            index = scope.availableFields.indexOf(elemSearch.field);\r\n                            if (index == -1) {\r\n                                scope.availableFields.push(elemSearch.field);\r\n                            }\r\n                        }\r\n\r\n                        var fieldFromSchema = models.getFieldFromSchema(field, scope.schema);\r\n\r\n                        elemSearch.title = fieldFromSchema.title;\r\n                        elemSearch.field = field;\r\n                        elemSearch.placeholder = {modelName: modelName, field: elemSearch.field};\r\n                        elemSearch.ref = (fieldFromSchema.ref && !fieldFromSchema.denormalize) ? fieldFromSchema.ref : undefined;\r\n\r\n                        index = scope.availableFields.indexOf(field);\r\n                        if (index > -1) {\r\n                            scope.availableFields.splice(index, 1);\r\n                        }\r\n\r\n                        if (!noSearch) {\r\n                            scope.search();\r\n                        }\r\n                    };\r\n\r\n                    scope.addSearch = function (field) {\r\n                        var s = {};\r\n                        field = field || scope.availableFields[0];\r\n\r\n                        s.clear = function () {\r\n                            s.value = \"\";\r\n                            scope.search();\r\n                        };\r\n\r\n                        s.remove = function () {\r\n\r\n                            var index = scope.searches.indexOf(s);\r\n                            if (index > -1) {\r\n                                scope.searches.splice(index, 1);\r\n                            }\r\n\r\n                            index = scope.availableFields.indexOf(s.field);\r\n                            if (index == -1) {\r\n                                scope.availableFields.push(s.field);\r\n                            }\r\n                            scope.search();\r\n                        };\r\n\r\n                        scope.updateSearch(s, field, true);\r\n                        scope.searches.push(s);\r\n                    };\r\n\r\n                    function isHidden(f) {\r\n                        if(!f) {\r\n                            return true;\r\n                        }\r\n                        if(!f.class) {\r\n                            return false;\r\n                        }\r\n                        if(f.class.split(' ').indexOf('hidden') < 0) {\r\n                            return false\r\n                        } else {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    function hasToGenerateSearchField(f) {\r\n                        if(isHidden(f)) {\r\n                            return false;\r\n                        }\r\n\r\n                        if(f.type == 'array') {\r\n                            if(f.items && f.items.type == 'string' && !f.items.format) {\r\n                                return true;\r\n                            }\r\n                            if(f.items && f.items.type == 'object' && f.items.format==\"available-search\") {\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        } if(f.type == 'object') {\r\n                            if(f.format) {\r\n                                return false;\r\n                            } else {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n                            return f.format != \"image\" && f.format != \"mixed\";\r\n                        }\r\n\r\n                    }\r\n\r\n                    models.getModelSchema(modelName, function (schema) {\r\n                        if (schema) {\r\n                            scope.schema = schema;\r\n                            scope.allFields = common.getAllSchemaFields(schema);\r\n                            scope.availableFields = scope.allFields.filter(function (val) {\r\n                                var f = models.getFieldFromSchema(val, schema);\r\n\r\n                                if (!f) {\r\n                                    console.log(\"WARNING: FIELD NOT FOUND WHEN GENERATING SEARCH FIELDS: \", val)\r\n                                }\r\n\r\n                                return hasToGenerateSearchField(f);\r\n                            });\r\n                        }\r\n\r\n                        models.getModelConfig(modelName, function (config) {\r\n                            scope.addSearch(config.displayField);\r\n\r\n                            scope.availableFields = scope.availableFields.filter(function(val) {\r\n                                if(config.searchableFields) {\r\n                                    return !(config.searchableFields.indexOf(val) == -1);\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n\r\n                    /*scope.$on('$routeChangeSuccess', function (event, current, previous) {\r\n                     searchFunc(current.params.schema);\r\n                     });*/\r\n\r\n                    //scope.newSearch = function () {\r\n                    //    scope.addSearch(scope.availableFields[0]);\r\n                    //};\r\n\r\n                    /*** MONGO DATE PARSING **/\r\n                    function parseMongoDate(txt) {\r\n                        var result = {};\r\n                        var dt = parseDateTimeRange(txt);\r\n\r\n                        if(dt.err) {\r\n                            return dt;\r\n                        }\r\n\r\n                        if(!dt.end) {\r\n                            //CASE 0 1/12/15 convert year\r\n                            updateYear(dt.start);\r\n                            var d = dt.start;\r\n\r\n                            if(d.day == undefined && d.month != undefined && d.year != undefined && d.hour == undefined) {\r\n                                //CASE 4 12/2015 -> gte 1/12/2015 0:00:00 .. lt 1/1/2016 0:00:00\r\n                                result[\"$gte\"] = new Date(d.year,d.month-1,1,0,0,0,0);\r\n                                result[\"$lt\"]  = new Date(d.year,d.month,1,0,0,0,0);\r\n                            } else if(d.day != undefined && d.month != undefined && d.year != undefined && d.hour == undefined) {\r\n                                //CASE 1 1/12/2015 -> 1/12/2015 0:00:00 .. lt 2/12/2015 0:00:00\r\n                                result[\"$gte\"] = new Date(d.year,d.month-1,d.day,0,0,0,0);\r\n                                result[\"$lt\"] =  new Date(d.year,d.month-1,d.day+1,0,0,0,0);\r\n                            } else if(d.day != undefined && d.month != undefined && d.year != undefined && d.hour != undefined) {\r\n                                //CASE 2 1/12/2015 HH:MM -> gte 1/12/2015 HH:MM:00 .. lte 1/12/2015 HH:MM:59\r\n                                //CASE 3 1/12/2015 HH:MM:SS\r\n                                var sec = 0;\r\n                                if(!isNaN(d.second)) {\r\n                                    sec = d.second;\r\n                                }\r\n                                result[\"$gte\"] = new Date(d.year,d.month-1,d.day,d.hour,d.minute,sec,0);\r\n                                result[\"$lte\"] = new Date(d.year,d.month-1,d.day,d.hour,d.minute,sec,999);\r\n                            } else {\r\n                                result = {err: \"format invalid\"};\r\n                            }\r\n                        } else {\r\n                            //CASE 0 1/12/15 convert year\r\n                            updateYear(dt.start);\r\n                            updateYear(dt.end);\r\n                            var d1 = dt.start;\r\n                            var d2 = dt.end;\r\n                            var sec1 = 0;\r\n                            var sec2 = 0;\r\n\r\n                            if(d1.second != undefined) {\r\n                                sec1 = d1.second;\r\n                            }\r\n\r\n                            if(d2.second != undefined) {\r\n                                sec2 = d2.second;\r\n                            }\r\n\r\n                            if(d1.hour == undefined && d2.hour == undefined && d1.year != undefined && d2.year != undefined) {\r\n                                // 1/2/90 - 2/2/90\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,0,0,0,0);\r\n                                result[\"$lte\"] = new Date(d2.year,d2.month-1,d2.day,23,59,59,999);\r\n                            } else if(d1.hour != undefined && d2.hour != undefined && d1.year != undefined && d2.year != undefined) {\r\n                                // 1/2/90 H:M - 2/2/90 H:M\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,d1.hour,d1.minute,sec1,0);\r\n                                result[\"$lte\"] = new Date(d2.year,d2.month-1,d2.day,d2.hour,d2.minute,sec2,999);\r\n                            } else if(d1.hour != undefined && d2.hour != undefined && d1.year != undefined && d2.year == undefined) {\r\n                                // 1/2/90 H:M - H:M\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,d1.hour,d1.minute,sec1,0);\r\n                                result[\"$lte\"] = new Date(d1.year,d1.month-1,d1.day,d2.hour,d2.minute,sec2,999);\r\n                            } else if(d1.hour != undefined && d2.hour == undefined && d1.year != undefined && d2.year != undefined) {\r\n                                // 1/2/90 H:M - 2/2/90\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,d1.hour,d1.minute,sec1,0);\r\n                                result[\"$lte\"] = new Date(d2.year,d2.month-1,d2.day,d1.hour,d1.minute,sec1,999);\r\n                            } else {\r\n                                result = {err: \"format invalid\"};\r\n                            }\r\n                        }\r\n                        debugParse(result);\r\n                        return result;\r\n                    }\r\n\r\n                    function updateYear(dt) {\r\n                        var year = Number(dt.year);\r\n                        if(year<100) {\r\n                            if(year<46) {\r\n                                year = 2000 + year;\r\n                            } else {\r\n                                year = 1900 + year;\r\n                            }\r\n                            dt.year = String(year);\r\n                        }\r\n                    }\r\n\r\n                    function parseDateTimeRange(txt) {\r\n                        var pieces = txt.split(\"-\");\r\n                        switch(pieces.length) {\r\n                            case 1:\r\n                                var d1 = parseDateTime(pieces[0].trim());\r\n                                if(d1) {\r\n                                    return {start: d1};\r\n                                } else {\r\n                                    return {err:\"format invalid\"};\r\n                                }\r\n                            case 2:\r\n                                var d1 = parseDateTime(pieces[0].trim());\r\n                                var d2 = parseDateTime(pieces[1].trim());\r\n                                if(d1 && d2) {\r\n                                    return {start: d1, end: d2};\r\n                                } else {\r\n                                    return {err:\"format invalid\"};\r\n                                }\r\n                            default:\r\n                                return {err:\"format invalid\"};\r\n                        }\r\n                    }\r\n\r\n                    function parseDateTime(dt) {\r\n                        var pieces = dt.split(\" \");\r\n                        switch(pieces.length) {\r\n                            case 1:\r\n                                return parseDateOrTime(pieces[0].trim());\r\n                            case 2:\r\n                                var dt1 = parseDateOrTime(pieces[0].trim());\r\n                                var dt2 = parseDateOrTime(pieces[1].trim());\r\n                                if(!dt1 || !dt2) {\r\n                                    return null;\r\n                                } else {\r\n                                    dt1.hour = dt2.hour;\r\n                                    dt1.minute = dt2.minute;\r\n                                    dt1.second = dt2.second;\r\n                                    return dt1;\r\n                                }\r\n                            default:\r\n                                return null;\r\n                        }\r\n                    }\r\n\r\n                    function parseDateOrTime(dt) {\r\n                        if(dt.indexOf(':')!=-1) {\r\n                            return parseTime(dt);\r\n                        } else if(dt.indexOf('/')!=-1) {\r\n                            return parseDate(dt);\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n\r\n                    function Num(txt) {\r\n                        if(txt==undefined) return undefined;\r\n                        return Number(txt);\r\n                    }\r\n\r\n                    function parseTime(t) {\r\n                        var regex = /^(\\d?\\d):(\\d\\d)(:(\\d\\d))?$/g\r\n                        var result = regex.exec(t);\r\n                        if(result) {\r\n                            return {hour: Num(result[1]) , minute: Num(result[2]), second: Num(result[4])};\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n\r\n                    function parseDate(d) {\r\n                        var regex = /^((\\d?\\d)\\/)?(\\d?\\d)\\/(\\d{2,4})$/g\r\n                        var result = regex.exec(d);\r\n                        if(result) {\r\n                            var o = {day: Num(result[2]) , month: Num(result[3]), year: Num(result[4])};\r\n                            return o;\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n\r\n                    function debugParse(x) {\r\n                        if(x[\"$gte\"]) {\r\n                            console.log(\"GTE\", x[\"$gte\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        if(x[\"$gt\"]) {\r\n                            console.log(\"GT \", x[\"$gt\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        if(x[\"$lte\"]) {\r\n                            console.log(\"LTE\", x[\"$lte\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        if(x[\"$lt\"]) {\r\n                            console.log(\"LT \", x[\"$lt\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        console.log(\"----------------------------------------\");\r\n                    }\r\n\r\n                    /** END MONGO DATE PARSING ***/\r\n\r\n                    scope.search = function () {\r\n                        var query = {};\r\n\r\n                        models.getModelSchema(modelName, function (schema) {\r\n                            angular.forEach(scope.searches, function (s) {\r\n                                var singleQuery = {};\r\n                                if (s.value) {\r\n                                    var sfield = models.getFieldFromSchema(s.field, schema);\r\n                                    if (sfield) {\r\n                                        if (sfield.type == \"string\" && !sfield.format && !sfield.ref) {\r\n                                            if (s.value !== \"\") {\r\n                                                singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                            }\r\n                                        } else if (sfield.type == \"string\" && sfield.format == \"date\") {\r\n                                            var q = parseMongoDate(s.value);\r\n\r\n                                            if (s.value !== \"\") {\r\n                                                if(q.err == undefined) {\r\n                                                    singleQuery[s.field] = q;\r\n                                                } else {\r\n                                                    alert(\"Format invalid in field \"+s.field);\r\n                                                }\r\n                                            }\r\n                                        } else if (sfield.ref && !sfield.denormalize) {\r\n                                            singleQuery[s.field] = s.value;\r\n                                            // References may be loaded before we have some useful information for querying references\r\n                                        } else if (sfield.ref && sfield.denormalize) {\r\n                                            singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                        } else if(sfield.type == \"array\" && sfield.items && sfield.items.ref && sfield.items.denormalize && Array.isArray(sfield.items.denormalize)) {\r\n                                            // This case allows to search for the first denormalized field inside an array of denormalized references\r\n                                            singleQuery[s.field+\".\"+sfield.items.denormalize[0]] = {$regex: s.value, $options: 'i'};\r\n                                        } else if(sfield.type == \"array\" && sfield.items && sfield.items.type == \"string\") {\r\n                                            // This case allows to search inside grants\r\n                                            singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                        } else {\r\n                                            singleQuery[s.field] = s.value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                angular.extend(query, singleQuery);\r\n                            });\r\n                        });\r\n\r\n                        search.setQuery(query);\r\n                        search.setSkip(0);\r\n                        scope.$parent.search();\r\n\r\n                    };\r\n                }\r\n            };\r\n        }])\r\n        .directive(\"searchRefInModel\", ['models', 'common', function (models, common) {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: false,\r\n                templateUrl: 'js/directives/search-model/search-ref-model.html',\r\n                link: function (scope, element, attrs, ngModel) {\r\n                    scope.elemsearch = scope.$eval(attrs.elemsearch);\r\n                    var ref = scope.elemsearch.ref;\r\n\r\n                    if (!element.select) {\r\n                        return;\r\n                    }\r\n\r\n                    var displayField = \"\";\r\n                    var idSelect = \"\";\r\n\r\n                    function getDocumentById(modelId) {\r\n                        return function (query, skip) {\r\n                            return models.getModel(ref, function (m) {\r\n                                var config = m.config;\r\n                                var elem = \"\";\r\n                                if (modelId instanceof Object) {\r\n                                    elem = modelId[config.id];\r\n                                } else {\r\n                                    elem = modelId;\r\n                                }\r\n                                models.getDocument(ref, elem, function (doc) {\r\n                                    displayField = config.displayField;\r\n                                    idSelect = config.id;\r\n\r\n                                    var q = {};\r\n                                    q.query = {};\r\n                                    var regex = query.search;\r\n                                    q.query.$or = [];\r\n\r\n                                    var forDisplay = {};\r\n                                    forDisplay[displayField] = {$regex: regex, $options: 'i'};\r\n                                    q.query.$or.push(forDisplay);\r\n\r\n\r\n                                    if (config.id != \"_id\" && m.schema[config.id] && m.schema[config.id].type == \"string\") {\r\n                                        var forID = {};\r\n                                        forID[idSelect] = {$regex: regex, $options: 'i'};\r\n                                        q.query.$or.push(forID);\r\n                                    }\r\n\r\n                                    q.limit = 20;\r\n                                    q.skip = skip;\r\n\r\n                                    //SHARDING\r\n                                    if (models.getShard(ref)) {\r\n                                        q[models.getShard(ref).key] = models.getShard(ref).value;\r\n                                    }\r\n\r\n                                    models.search(ref, q, function (response, count) {\r\n                                        if (skip) {\r\n                                            scope.searchRes = scope.searchRes.concat(response);\r\n                                        } else {\r\n                                            scope.searchRes = response;\r\n                                        }\r\n\r\n                                        if (doc) {\r\n                                            var present = scope.searchRes.some(function (element) {\r\n                                                return element[config.id] == doc[config.id];\r\n                                            });\r\n\r\n                                            if (!present) {\r\n                                                scope.searchRes.splice(0, 0, doc);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        };\r\n                    }\r\n\r\n                    var elements = getDocumentById(scope.$eval(attrs.ngModel));\r\n\r\n                    scope.disabled = false;\r\n                    scope.searchEnabled = true;\r\n                    scope.searchRes = [];\r\n                    scope.search = elements;\r\n\r\n                    scope.printSelectedElement = function (document) {\r\n                        if (document) {\r\n                            var f = common.getField(displayField, document);\r\n                            if (f && f !== \"\" && f.length > 0) {\r\n                                return f + \" <\" + document[idSelect] + \">\";\r\n                            } else {\r\n                                return \"No display field. ID: <\" + document[idSelect] + \">\";\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    scope.selectDisplayField = function (document) {\r\n                        if (document) {\r\n                            var f = common.getField(displayField, document);\r\n                            if (f && f !== \"\" && f.length > 0) {\r\n                                return f;\r\n                            } else {\r\n                                return \"<empty>\";\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    scope.selectIdField = function (document) {\r\n                        if (document !== undefined) {\r\n                            return document[idSelect] || \"No ID\";\r\n                        }\r\n                    };\r\n\r\n                    scope.$on('refreshSelect2' + ref, function () {\r\n                        console.log(\"REFRESH SELECT2\");\r\n                        elements();\r\n                    });\r\n\r\n                    element.find('ul').bind('scroll', function () {\r\n                        var raw = arguments[0].target;\r\n                        if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {\r\n                            elements(scope.$select, (raw.children[0].children.length - 2));\r\n                        }\r\n                    });\r\n\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n    angular.module('injectorApp').directive('ellipsis', function () {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function (scope, element, attrs, ngModel) {\n                var width = element.width();\n                element.css(\"width\", width);\n                element.css(\"text-overflow\", 'ellipsis');\n                element.css(\"overflow\", 'hidden');\n                element.css(\"white-space\", 'nowrap');\n                // Do calculation\n                //var model = scope.$eval(attrs.ngModel);\n                //console.log(\"Model\", model);\n                //console.log(\"Model > Length\", model.width());\n            }\n        };\n    });\n}());\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .directive(\n            \"mAppLoading\",\n            ['$animate', function ($animate) {\n                // Return the directive configuration.\n                return ({\n                    link: link,\n                    restrict: \"C\"\n                });\n                // I bind the JavaScript events to the scope.\n                function link(scope, element, attributes) {\n                    // Due to the way AngularJS prevents animation during the bootstrap\n                    // of the application, we can't animate the top-level container; but,\n                    // since we added \"ngAnimateChildren\", we can animated the inner\n                    // container during this phase.\n                    // --\n                    // NOTE: Am using .eq(1) so that we don't animate the Style block.\n                    $animate.leave(element.children().eq(1)).then(\n                        function cleanupAfterAnimation() {\n                            // Remove the root directive element.\n                            element.remove();\n                            // Clear the closed-over variable references.\n                            scope = element = attributes = null;\n                        }\n                    );\n                }\n            }]\n        );\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('CreateController', ['$scope', '$http', '$location', '$routeParams', 'models', '$controller', 'common', function ($scope, $http, $location, $routeParams, models, $controller,common) {\r\n            var modelName = $routeParams.schema;\r\n            $scope.action = \"create\";\r\n            $scope.common=common;\r\n\r\n            models.getModel(modelName, function (m) {\r\n                if (!m.config.post) {\r\n                    $location.path('/model/' + modelName);\r\n                } else {\r\n                    $scope.model = {};\r\n                    var m_copy = angular.copy(m);\r\n                    $scope.m = m;\r\n                    $scope.m_copy = m_copy;\r\n                    $scope.action = \"create\";\r\n                    $controller('FormController', {$scope: $scope}); //This works\r\n                }\r\n            });\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('GraphsController', ['$scope', '$routeParams', '$sce', '$compile', 'models', function ($scope, $routeParams, $sce, $compile, models) {\r\n        $scope.schema = $routeParams.schema;\r\n\r\n        models.getModelConfig($scope.schema, function (config) {\r\n            $scope.config = config;\r\n            $scope.graphs = config.graphs;\r\n        });\r\n\r\n        $scope.getTag = function (graph) {\r\n            var tag = graph.type;\r\n            return '<injector-'+ tag +' graph=\"' + graph.title + '\"></injector-'+ tag +'>';\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('UpdateController', ['$scope', '$http', '$routeParams', '$location', 'models', '$controller', 'common', function ($scope, $http, $routeParams, $location, models, $controller,common) {\r\n            var modelName = $routeParams.schema;\r\n            var id = $routeParams.id;\r\n            var shard = $routeParams.shard;\r\n            $scope.common=common;\r\n\r\n            models.getModel(modelName, function (m) {\r\n                models.getDocument(modelName, id, shard, function (document) {\r\n                    $scope.prune(document);\r\n                    $scope.action = \"update\";\r\n                    $scope.model = document || {};\r\n                    var m_copy = angular.copy(m);\r\n                    $scope.m = m;\r\n                    $scope.m_copy = m_copy;\r\n                    $controller('FormController', {$scope: $scope}); //This works\r\n                });\r\n            });\r\n\r\n            //We made this in client because is an specific management of angular-schema-form\r\n            $scope.prune = function (document) {\r\n                for (var key in document) {\r\n                    var elem = document[key];\r\n                    if (elem && (typeof elem === 'object' || elem instanceof Array)) {\r\n                        $scope.prune(elem);\r\n                    }\r\n                    if (elem == null) {//Angular schema form does not allow null elements. Undefined is better\r\n                        document[key] = undefined;\r\n                    }\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('FormController', ['$rootScope', '$scope', '$http', '$location', '$routeParams', '$anchorScroll', '$timeout', '$modal', 'models', 'configs', 'dependsOn', 'common', '$window', 'flash', '$translate', function ($rootScope, $scope, $http, $location, $routeParams, $anchorScroll, $timeout, $modal, models, configs, dependsOn, common, $window, flash, $translate) {\r\n            var modelName = $routeParams.schema;\r\n            var id = $routeParams.id;\r\n            var modified = false;\r\n\r\n            $scope.buttonsPosition = configs.backoffice.buttonsPosition || 'bottom';\r\n\r\n            function walkThroughSchema(schema) {\r\n                var keys = Object.keys(schema);\r\n                for (var i in keys) {\r\n                    if(schema[keys[i]]) {\r\n                        if (schema[keys[i]].editOnCreate) {\r\n                            var action = $scope.action.toLowerCase();\r\n                            schema[keys[i]].readonly = !(action === \"create\");\r\n                        }\r\n\r\n                        if (schema[keys[i]].i18nTitle) {\r\n                            schema[keys[i]].title = $translate.instant(schema[keys[i]].i18nTitle);\r\n                        }\r\n\r\n                        var type = schema[keys[i]].type;\r\n                        if ((type === 'array' || type === 'object') && schema[keys[i]].properties) {\r\n                            walkThroughSchema(schema[keys[i]].properties);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            $scope.m = angular.copy($scope.m_copy);\r\n            walkThroughSchema($scope.m.schema);\r\n\r\n            $scope.schema = {\r\n                \"type\": \"object\",\r\n                \"title\": modelName,\r\n                \"action\": $scope.action,\r\n                \"properties\": $scope.m.schema\r\n            };\r\n\r\n            $scope.form = common.processForm($scope.m.config.form);\r\n\r\n            if ($scope.action.toLowerCase() == \"create\" && models.getShard(modelName) && models.getShard(modelName).value) {\r\n                $scope.model[models.getShard(modelName).key] = models.getShard(modelName).value;\r\n            }\r\n\r\n            $rootScope.$on('shardChangeEvent', function () {\r\n                if ($scope.action.toLowerCase() == \"create\" && models.getShard(modelName) && models.getShard(modelName).value) {\r\n                    $scope.model[models.getShard(modelName).key] = models.getShard(modelName).value;\r\n                }\r\n            });\r\n\r\n\r\n            dependsOn.apply($scope, modelName, $scope.model);\r\n\r\n            $timeout(function () {\r\n                $scope.$watch('model', function (newVal, oldVal) {\r\n                    if (!angular.equals(newVal, oldVal)) {\r\n                        modified = true;\r\n                    }\r\n                }, true);\r\n            }, 0);\r\n\r\n            $scope.schemaHREF = function () {\r\n                $location.path(\"/model/\" + modelName);\r\n                $location.hash('');\r\n            };\r\n\r\n            $scope.submitForm = function (form, model, isApply) {\r\n                $scope.$broadcast('schemaFormValidate');\r\n                if (form.$valid) {\r\n                    if ($scope.action.toLowerCase() == 'update' && $scope.m.config.put) {\r\n                        models.putDocument(modelName, id, model, function (response) {\r\n                            if (response.status == '200') {\r\n                                modified = false;\r\n                                flash.success(\"Done\", \"Document saved successfully\");\r\n                                $scope.$broadcast('postedDocument', response.data);\r\n                                $scope.$broadcast('puttedDocument', response.data);\r\n                                if (!isApply) {\r\n                                    $location.path('/model/' + modelName);\r\n                                    $location.hash('');\r\n                                }\r\n                            }\r\n                        });\r\n                    } else if ($scope.action.toLowerCase() == 'create' && $scope.m.config.post) {\r\n                        models.postDocument(modelName, model, function (response) {\r\n                            if (response.status == '201') {\r\n                                modified = false;\r\n                                flash.success(\"Done\", \"Document saved successfully\");\r\n                                $scope.$broadcast('postedDocument', response.data);\r\n                                if (!isApply) {\r\n                                    $location.path('/model/' + modelName);\r\n                                    $location.hash('');\r\n                                } else {\r\n                                    $location.path('/model/' + modelName + '/update/' + response.data[Object.keys(response.data)[0]]);\r\n                                    $location.hash('');\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    $scope.validation = !form.$valid;\r\n                    $scope.validationErrors = form.$error;\r\n                    $location.hash('error');\r\n                    $anchorScroll.yOffset = 100;\r\n                    $anchorScroll();\r\n\r\n                }\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $window.history.back();\r\n            };\r\n\r\n            $scope.$on('$locationChangeStart', function (event, next, current) {\r\n                if ($scope.ngForm.$valid && modified) {\r\n                    event.preventDefault();\r\n\r\n                    var modalInstance = $modal.open({\r\n                        templateUrl: 'changedDocument.html',\r\n                        controller: 'ModalChangedCtrl',\r\n                        size: 'sm',\r\n                        resolve: {\r\n                            items: function () {\r\n                                return $scope.items;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function () { //CLOSE CALLBACK\r\n                        $scope.submitForm($scope.ngForm, $scope.model);\r\n                    }, function () { //DISMISS CALLBACK\r\n                        modified = false;\r\n                        var basePathLength = $location.absUrl().length - $location.url().length;\r\n                        $location.path(next.substring(basePathLength));\r\n                    });\r\n\r\n                }\r\n            });\r\n\r\n\r\n            $scope.$on('bkButton', function (event, form) {\r\n                if (form.action == 'api') {\r\n                    var http;\r\n                    var url = form.url;\r\n\r\n                    var getUrl = function (path) {\r\n                        return path.replace(/[^/]*:([^/]*)+/g, function (s, m) {\r\n                            return safeAccess($scope.model, m);\r\n                        });\r\n                    };\r\n\r\n                    url = getUrl(url);\r\n\r\n                    switch (form.method.toUpperCase()) {\r\n                        case 'GET':\r\n                            http = $http.get(url);\r\n                            break;\r\n                        case 'PUT':\r\n                            http = $http.put(url, $scope.model);\r\n                            break;\r\n                        case 'POST':\r\n                            var body = {};\r\n                            if (form.body) {\r\n                                angular.extend(body, form.body);\r\n                            } else {\r\n                                body = $scope.model;\r\n                            }\r\n                            http = $http.post(url, body);\r\n                            break;\r\n                        case 'DELETE':\r\n                            http = $http.delete(url);\r\n                            break;\r\n                        default :\r\n                            throw new Error('Method not configured properly');\r\n                    }\r\n                    if (http) {\r\n                        http.success(function (res) {\r\n                            angular.forEach(Object.keys(res), function (key) {\r\n                                $scope.model[key] = res[key];\r\n                            });\r\n                        }).error(function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                } else if (form.action == 'function') {\r\n                    window[form.func]($scope.model, $scope.m.schema);\r\n                }\r\n            });\r\n\r\n            $rootScope.$on('$translateChangeSuccess', function () {\r\n                walkThroughSchema($scope.schema.properties);\r\n                $scope.$broadcast('schemaFormRedraw');\r\n            });\r\n        }])\r\n        // It is not the same as the $modal service used above.\r\n        .controller('ModalChangedCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n\r\n            $scope.ok = function () {\r\n                $modalInstance.close('ok');\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .controller('LoginController', ['$http', '$scope', '$document', '$location', 'loginProvider', function ($http, $scope, $document, $location, loginProvider) {\r\n        $scope.update = function (user) {\r\n            loginProvider.login(user, function (res) {\r\n                if (!res) {\r\n                    $scope.loginError = 'incorrect login';\r\n                } else{\r\n                    $location.path('/');\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .filter('encodeURIComponent', function() {\r\n            return window.encodeURIComponent;\r\n        })\r\n\r\n        .controller('MainController', ['$rootScope', '$scope', '$q', 'loginProvider', 'models', 'common', function ($rootScope, $scope, $q, loginProvider, models, common) {\r\n            $scope.postLoginFuncs = [];\r\n            $scope.postLoginFuncs.push(function(){\r\n                models.getModels(function (m) {\r\n                    $scope.schemas = {};\r\n                    angular.forEach(m, function (schema) {\r\n                        models.getModelConfig(schema, function (config) {\r\n                            $scope.schemas[schema] = config;\r\n\r\n                            loginProvider.getUser(function(){}); //Force first login\r\n                            if (config.isSingle) {\r\n                                models.getSingleModel(schema, function (doc) {\r\n                                    if (!doc) {\r\n                                        $scope.schemas[schema].redirectTo = \"#/model/\" + schema + \"/new\";\r\n                                    } else {\r\n                                        $scope.schemas[schema].redirectTo = \"#/model/\" + schema + \"/update/\" + doc[config.id];\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n\r\n            $scope.isMenuCollapsed = true;\r\n\r\n            $scope.$on('collapse-menu', function (event) {\r\n                $scope.isMenuCollapsed = !$scope.isMenuCollapsed;\r\n            });\r\n\r\n            $scope.pretty = function pretty(str) {\r\n                return common.prettifyTitle(str);\r\n            };\r\n\r\n            $scope.schemaHREF = function (name, conf) {\r\n                return conf.redirectTo || \"#/model/\" + name;\r\n            };\r\n\r\n            angular.element('body').ready(function () {\r\n                $rootScope.$broadcast('bodyReady', 'MainController');\r\n            });\r\n\r\n            $rootScope.$on('login', function (event, args) {\r\n                angular.forEach($scope.postLoginFuncs, function(v){\r\n                    v();\r\n                });\r\n                $scope.postLoginFuncs = [];\r\n            });\r\n\r\n            $rootScope.$on('logout', function (event, args) {\r\n            });\r\n    }]);\r\n}());\r\n\r\n\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .controller('ModelController', ['$scope', '$http', '$route', '$routeParams', '$modal', '$location', 'common', 'models', 'flash', 'configs', 'search', function ($scope, $http, $route, $routeParams, $modal, $location, common, models, flash, configs, search) {\r\n            var defaultItemsPerPage = 20;\r\n            $scope.flash = flash;\r\n            $scope.common = common;\r\n            $scope.removeDisabled = 'disabled';\r\n\r\n            $scope.maxSize = 10;\r\n            $scope.schema = $routeParams.schema;\r\n            $scope.create = false;\r\n            $scope.checkedGroupIds = {};\r\n            search.clearQuery();\r\n\r\n            $scope.$watch(\"removeAll\", function (value) {\r\n                if (value !== undefined) {\r\n                    for (var i in $scope.elements) {\r\n                        $scope.elements[i].checked = value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            models.getModel($scope.schema, function (model) {\r\n                $scope.config = model.config;\r\n                $scope.schemaForm = model.schema;\r\n\r\n                if (model.config.isSingle) { //In single documents, this page / controller should not appear anymore !\r\n                    $location.path('/');   //Redirect to home\r\n                    return;\r\n                }\r\n\r\n                //Build the array with all the displayable elements\r\n                $scope.config.allDisplayFields = [];\r\n                $scope.config.allDisplayFields.push($scope.config.displayField);\r\n                if ($scope.config.extraDisplayFields) {\r\n                    $scope.config.allDisplayFields = $scope.config.allDisplayFields.concat($scope.config.extraDisplayFields);\r\n                }\r\n\r\n                $scope.search = function (skip) {\r\n                    if (skip !== undefined) {\r\n                        search.setSkip(skip);\r\n                    }\r\n\r\n                    search.search($scope.schema, function (elements, count, err) {\r\n                        if (elements) {\r\n                            $scope.elements = elements;\r\n                        }\r\n                        $scope.totalElements = count;\r\n                    });\r\n                };\r\n\r\n                $scope.itemsPerPage = $scope.userItemsPerPage = configs.backoffice.itemsPerPage || defaultItemsPerPage;\r\n                search.setLimit($scope.itemsPerPage);\r\n                search.setSkip(0);\r\n\r\n                if(model.config.defaultSearch) {\r\n                    search.setSortBy(model.config.defaultSearch);\r\n                }\r\n\r\n                //Init elements\r\n                $scope.search();\r\n\r\n                // Init function of pageChanged\r\n                $scope.pageChanged = function () {\r\n                    $scope.itemsPerPage = $scope.userItemsPerPage;\r\n                    if ($scope.currentPage > 0 && $scope.itemsPerPage > 0) {\r\n                        var skip = (($scope.currentPage - 1) * $scope.itemsPerPage);\r\n                        search.setSkip(skip);\r\n                    } else {\r\n                        search.setSkip(0);\r\n                    }\r\n                    search.setLimit($scope.itemsPerPage);\r\n                    $scope.search();\r\n                };\r\n\r\n                $scope.id = function (element) {\r\n                    return element[$scope.config.id];\r\n                };\r\n\r\n                $scope.shard = function (element) {\r\n                    return element[$scope.config.shard.shardKey];\r\n                };\r\n\r\n                $scope.hasShard = function (element) {\r\n                    var hasShard = $scope.config.shard && $scope.config.shard.shardKey;\r\n                    return hasShard && element[$scope.config.shard.shardKey];\r\n                };\r\n\r\n                $scope.getUrl = function (element, schema) {\r\n                    var model;\r\n                    if(element.__t) {\r\n                        model = element.__t;\r\n                    } else {\r\n                        model = schema;\r\n                    }\r\n                    var url = \"#/model/\" + model + \"/update/\" + encodeURIComponent(encodeURIComponent($scope.id(element)));\r\n                    if ($scope.hasShard(element)) {\r\n                        url += \"/\" + encodeURIComponent($scope.shard(element));\r\n                    }\r\n                    return url;\r\n                };\r\n\r\n                $scope.isDisabled = function (element) {\r\n                    return !(element[$scope.config.id] && element[$scope.config.id] !== \"\");\r\n                };\r\n\r\n                $scope.displayCustomField = function (field, element, schema) {\r\n                    var s = common.getField(field, element);\r\n                    var sch = models.getFieldFromSchema(field, schema);\r\n                    if(sch && sch.format === 'date') {\r\n                        if(s && s !=='') {\r\n                            s = new Date(Date.parse(s)).toJSON();\r\n                        }\r\n                    }\r\n                    return (s === undefined || s === \"\") ? \"<empty>\" : s;\r\n                };\r\n\r\n                $scope.sortBy = function (property, asc) {\r\n                    search.addSortBy(property, asc);\r\n                    $scope.search(0);\r\n                };\r\n\r\n                $scope.getSort = function (property) {\r\n                    return search.getSort(property);\r\n                };\r\n\r\n                $scope.$on('shardChangeEvent', function (event, data) {\r\n                    $scope.search(0);\r\n                });\r\n            });\r\n\r\n            $scope.promptAlert = function (cb) {\r\n                var del;\r\n                if (del) {\r\n                    cb(del);\r\n                }\r\n                var modalInstance = $modal.open({\r\n                    templateUrl: 'myModalContent.html',\r\n                    controller: 'ModalInstanceCtrl',\r\n                    size: 'sm',\r\n                    resolve: {\r\n                        items: function () {\r\n                            return $scope.items;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                modalInstance.result.then(function () {\r\n                    del = true;\r\n                    cb(true);\r\n                });\r\n            };\r\n        }])\r\n\r\n        .filter('to_trusted', ['$sce', function ($sce) {\r\n            return function (text) {\r\n                if (text) {\r\n                    return $sce.trustAsHtml(text.toString());\r\n                } else {\r\n                    return text;\r\n                }\r\n            };\r\n        }])\r\n\r\n        // Please note that $modalInstance represents a modal window (instance) dependency.\r\n        // It is not the same as the $modal service used above.\r\n        .controller('ModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n\r\n            $scope.ok = function () {\r\n                $modalInstance.close('ok');\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }])\r\n\r\n        .controller('ImportModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('NavbarController', ['$rootScope', '$scope', '$location', 'loginProvider', function ($rootScope, $scope, $location, loginProvider) {\r\n            var navbar = function () {\r\n                loginProvider.getUser(function (user) {\r\n                    $scope.user = user;\r\n                });\r\n            };\r\n            navbar();\r\n            $scope.$on('login', function (event, data) {\r\n                navbar();\r\n            });\r\n\r\n            $scope.logout = function () {\r\n                loginProvider.logout();\r\n                $location.path('/logout');\r\n            };\r\n\r\n            $scope.toggleMenu = function () {\r\n                $rootScope.$broadcast('collapse-menu');\r\n            };\r\n        }]);\r\n}());\n(function() {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .controller('ShardingController', ['$scope', '$routeParams', '$rootScope', 'models', 'configs', function($scope, $routeParams, $rootScope, models, configs) {\r\n            var modelName;\r\n            $scope.$on('$routeChangeSuccess', function(event, current) {\r\n                modelName = current.params.schema;\r\n\r\n                // Gets configuration from custom page \"modelName\" parameter\r\n                if(modelName == undefined) {\r\n                    modelName = current.$$route.modelName;\r\n                }\r\n\r\n                if(modelName) {\r\n                    models.getModel(modelName, function(m) {\r\n                        if(m.config.shard) {\r\n                            $scope.shardKey = m.config.shard.shardKey;\r\n                            $scope.shardKeyText = 'Select ' + $scope.shardKey + ' shard';\r\n                            $scope.shardValues = m.config.shard.shardValues;\r\n\r\n                            if(models.getShard(modelName)) {\r\n                                $scope.shardKeyText = 'Using ' + models.getShard(modelName).key + ' ' + models.getShard(\r\n                                        modelName).value;\r\n                            } else {\r\n                                if(m.config.shard.filtered) {\r\n                                    $scope.locked = true;\r\n                                    $scope.setShard($scope.shardValues[0]);\r\n                                } else {\r\n                                    $scope.locked = false;\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            $scope.shardKey = undefined;\r\n                            $scope.shardKeyText = undefined;\r\n                            $scope.shardValues = undefined;\r\n                        }\r\n                    });\r\n                } else {\r\n                    $scope.shardKey = undefined;\r\n                    $scope.shardKeyText = undefined;\r\n                    $scope.shardValues = undefined;\r\n                }\r\n            });\r\n\r\n            $scope.setShard = function(value) {\r\n                $scope.shardKeyText = 'Using ' + $scope.shardKey + ' ' + value;\r\n                models.setShard($scope.shardKey, value, modelName);\r\n\r\n                $rootScope.$broadcast('shardChangeEvent');\r\n            };\r\n\r\n            $scope.removeShard = function() {\r\n                $scope.shardKeyText = 'Select ' + $scope.shardKey + ' shard';\r\n                //models.setShard($scope.shardKey, '', modelName);\r\n                models.removeShard(modelName);\r\n                $rootScope.$broadcast('shardChangeEvent');\r\n            };\r\n            $scope.shardKey = undefined;\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n\n    angular.module('injectorApp')\n        .controller('TranslateController', ['$scope', '$translate', 'configs', function ($scope, $translate, configs) {\n            //$scope.languages = $translate.getAvailableLanguageKeys();\n            $scope.languages = ['en', 'es'];\n            if (configs.backoffice.uniqueLanguage) {\n                $scope.showLanguages = false;\n                $translate.use(configs.backoffice.uniqueLanguage);\n            } else {\n                $scope.showLanguages = true;\n                $scope.use = function (lang) {\n                    $translate.use(lang);\n                };\n            }\n        }]);\n}());"]}